<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我是你皇叔</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-16T12:09:27.718Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>皇叔</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python机器学习</title>
    <link href="http://yoursite.com/2019/10/16/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/10/16/Python机器学习/</id>
    <published>2019-10-16T12:09:27.000Z</published>
    <updated>2019-10-16T12:09:27.718Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>一发入魂——小白在Ubuntu16环境下部署Oracle服务器并使用Windows客户端连接</title>
    <link href="http://yoursite.com/2019/10/16/Oracle%20Install/"/>
    <id>http://yoursite.com/2019/10/16/Oracle Install/</id>
    <published>2019-10-16T07:24:47.712Z</published>
    <updated>2019-04-20T10:10:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一发入魂——小白在Ubuntu16环境下部署Oracle服务器并使用Windows客户端连接"><a href="#一发入魂——小白在Ubuntu16环境下部署Oracle服务器并使用Windows客户端连接" class="headerlink" title="一发入魂——小白在Ubuntu16环境下部署Oracle服务器并使用Windows客户端连接"></a><strong>一发入魂——小白在Ubuntu16环境下部署Oracle服务器并使用Windows客户端连接</strong></h1><h1 id="1-学习几个基本Linux终端指令"><a href="#1-学习几个基本Linux终端指令" class="headerlink" title="1.学习几个基本Linux终端指令"></a>1.学习几个基本Linux终端指令</h1><p>　　由于Linux和Windows的软件安装方式有很大的不同，所以基本上都是需要在终端上敲命令行代码实现的。<br>　　一、cd（change directory）切换目录<br>　　<code>$cd　　　　　直接回到根目录</code><br>　　<code>$cd ..　　　　回到上级目录</code><br>　　<code>$cd 路径名　　切换至该路径</code><br>　　二、ls　查看文件或目录<br>　　<code>$ls　　　　　查看当前目录的文件与目录</code><br>　　<code>$cd 路径名　　查看该路径下的文件与目录</code><br>　　ls命令常用于检查目录下的文件及目录。这样我们就不用费力地去找文件管理器下的文件而是可以直接在终端中查看。当我们不确定自己创建的目录是否成功时可以轻松地使用ls查看。<br>　　三、su 和 sudo<br>　　有些时候一些指令需要我们拥有管理员权限方能执行，这个时候这两个指令就非常重要。<br>　　<code>su</code><br>　　进入root模式。su命令执行后，你需要在终端输入root密码，在终端中，密码是不显示的，输完直接敲回车即可。这是系统root用户，拥有很高的权限。值得注意的是，Ubuntu刚安装好是没有激活root的，需要我们手动激活。这时我们需要sudo指令。<br>　　<code>sudo</code><br>　　在指令的前面加上sudo 即可在管理员模式下执行指令。当然，密码还是要输的，这里输的密码是你的系统用户密码（开机密码）而不是root密码。<br>　　<code>sudo passwd root</code><br>　　执行该指令即可设定root密码。<br>　　四、vim 文档编辑<br>　　这个指令我们会在环境变量及配置文档的修改编辑中遇到。系统没有的话可以通过指令安装<br>　　<code>sudo apt-get install vim</code><br>　　安装好之后使用指令<code>sudo vim xxx</code>进入xxx文件。键盘敲击’i’即可进入insert模式。编辑完毕后按’esc’,在键盘上输入 <strong>‘:wq’</strong> 保存并退出。记住一定要加’冒号‘。不想保存的话用’:q’。</p><h1 id="2-安装JDK并配置环境变量"><a href="#2-安装JDK并配置环境变量" class="headerlink" title="2.安装JDK并配置环境变量"></a>2.安装JDK并配置环境变量</h1><p>　　由于Oracle是基于Java环境的数据库，所以必须要配置JDK方可运行。我们首先打开终端。<br>　　一、JDK安装<br>　　依次执行如下指令<br>　　<code>sudo apt-get update</code><br>　　<code>sudo apt-get install openjdk-8-jdk</code><br>　　这里安装的是JDK8，大家可以根据实际情况选用所需的JDK版本。<br>　　二、JDK环境变量的配置<br>　　通过指令<br>　　<code>sudo vim /etc/profile</code><br>　　打开profile文件，此文件存储Linux中的各种环境变量，后面的Oracle环境变量也将在此编辑。敲击’i’在文件末尾加入以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64</span><br><span class="line"></span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line"></span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class="line"></span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure></p><p>如何保存并退出在上一章节已经有提到，以后章节不再赘述。保存完毕后我们先要更新一下系统参数<code>source /etc/profile</code>在终端测试一下是否安装成功。依次输入指令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo %JAVA_HOME   </span><br><span class="line">java -version</span><br></pre></td></tr></table></figure></p><p>若出现我们添加进profile文件中的路径以及正确的java版本号则安装成功。若未出现，可能你需要检查一下profile文件或者java安装包。</p><h1 id="3-Oracle安装"><a href="#3-Oracle安装" class="headerlink" title="3.Oracle安装"></a>3.Oracle安装</h1><p>在进行各种依赖的下载还有乱七八糟的事之前，我们先把Oracle的安装包下载任务开始起来，这样就不需要多等一段时间了。Oracle11g的安装包在官网很容易找到，注意一定要将两个压缩包全部下载下来。最好还能定点下载到一个<strong>指定的目录</strong>里。本人就是将其下载至主文件夹下的<strong>Oracle</strong>文件夹下。这样方便后续的操作。  </p><h2 id="一、依赖包的安装"><a href="#一、依赖包的安装" class="headerlink" title="一、依赖包的安装"></a>一、依赖包的安装</h2><p>　　Linux不同于Windows，这些东西都需要我们自己手动去安装。要装的东西多的要死，笔者参考了一下网上的代码，来自Linux社区的rogear将其整合了一下，通过一句指令安装所有的依赖包。 因为包太多了，所以安装起来要稍微等一会儿。<br><code>sudo apt-get -y install automake autotools-dev binutils bzip2 elfutils expat gawk gcc gcc-multilib g++-multilib lib32ncurses5 lib32z1 ksh less lib32z1 libaio1 libaio-dev libc6-dev libc6-dev-i386 libc6-i386 libelf-dev libltdl-dev libxm4 libodbcinstq4-1 libodbcinstq4-1:i386 libpth-dev libpthread-stubs0-dev libstdc++5 make openssh-server rlwrap rpm sysstat unixodbc unixodbc-dev unzip x11-utils zlibc</code><br>　　笔者亲测没有问题，要问为什么，因为我也是小白！有两个依赖是32位的，需要换源安装。也不是太麻烦，依次执行以下指令即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">su</span><br><span class="line"></span><br><span class="line">cd /etc/apt/sources.list.d</span><br><span class="line"></span><br><span class="line">echo &quot;deb http://old-releases.ubuntu.com/ubuntu/ raring main restricted universe multiverse&quot; &gt; ia32-libs-raring.list</span><br><span class="line"></span><br><span class="line">apt update</span><br><span class="line"></span><br><span class="line">apt-get -y install lesstif2 lesstif2-dev</span><br><span class="line"></span><br><span class="line">rm -rf ia32-libs-raring.list</span><br><span class="line"></span><br><span class="line">apt update</span><br><span class="line"></span><br><span class="line">exit</span><br></pre></td></tr></table></figure></p><p>　　如果出现什么问题，那就将前两步调换一下位置。Linux中的依赖包有的是相互依赖的，笔者小白一枚也没搞清楚。  </p><h2 id="二、配置环境"><a href="#二、配置环境" class="headerlink" title="二、配置环境"></a>二、配置环境</h2><p>　　这里我们可以直接开两个终端来配，查一个配一个比较方便。<br>　　新建一个终端键入指令<code>sudo vim /etc/sysctl.conf</code>。<br>　　原终端按下列指令依次查出对应参数的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/sbin/sysctl -a | grep sem</span><br><span class="line"></span><br><span class="line">/sbin/sysctl -a | grep file-max</span><br><span class="line"></span><br><span class="line">/sbin/sysctl -a | grep aio-max</span><br><span class="line"></span><br><span class="line">/sbin/sysctl -a | grep ip_local_port_range</span><br><span class="line"></span><br><span class="line">/sbin/sysctl -a | grep rmem_default</span><br><span class="line"></span><br><span class="line">/sbin/sysctl -a | grep rmem_max</span><br><span class="line"></span><br><span class="line">/sbin/sysctl -a | grep wmem_default</span><br><span class="line"></span><br><span class="line">/sbin/sysctl -a | grep wmem_max</span><br><span class="line"></span><br><span class="line">/sbin/sysctl -a | grep shmall</span><br><span class="line"></span><br><span class="line">/sbin/sysctl -a | grep shmmax</span><br><span class="line"></span><br><span class="line">/sbin/sysctl -a | grep shmmni</span><br></pre></td></tr></table></figure></p><p>　　再将值填入对应的参数中并添加至新终端的’sysctl.conf’的末尾并保存退出。　　<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">fs.aio-max-nr = 65536</span><br><span class="line"></span><br><span class="line">fs.file-max = 242293</span><br><span class="line"></span><br><span class="line">kernel.shmall = 18446744073692774399</span><br><span class="line"></span><br><span class="line">kernel.shmmax = 18446744073692774399</span><br><span class="line"></span><br><span class="line">kernel.shmmni = 4096</span><br><span class="line"></span><br><span class="line">kernel.sem = 32000 1024000000 500 32000</span><br><span class="line"></span><br><span class="line">net.ipv4.ip_local_port_range = 32768 60999</span><br><span class="line"></span><br><span class="line">net.core.rmem_default = 212992</span><br><span class="line"></span><br><span class="line">net.core.rmem_max = 212992</span><br><span class="line"></span><br><span class="line">net.core.wmem_default = 212992</span><br><span class="line"></span><br><span class="line">net.core.wmem_max = 212992</span><br></pre></td></tr></table></figure></p><p>更新内核参数<code>sysctl -p</code>。<br>添加用户的内核限制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd </span><br><span class="line">cd /etc/security</span><br><span class="line">sudo vim limits.conf</span><br></pre></td></tr></table></figure></p><p>添加以下内容至文件末尾（’end of file’后）。用户名就是你登录Ubuntu的用户名，比如我的是njust。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">用户名 soft nproc 2047</span><br><span class="line"></span><br><span class="line">用户名 hard nproc 16384</span><br><span class="line"></span><br><span class="line">用户名 soft nofile 1024</span><br><span class="line"></span><br><span class="line">用户名 hard nofile 65536</span><br><span class="line"></span><br><span class="line">用户名 soft stack 10240</span><br></pre></td></tr></table></figure></p><p>　　现在我们要配置Oracle的环境变量。<code>sudo vim /etc/profile</code>  。将下列内容添加至文件后面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">export ORACLE_BASE=你的Oracle路径,笔者是/home/njust/Oracle</span><br><span class="line"></span><br><span class="line">export ORACLE_HOME=$ORACLE_BASE/product/11.2.0/dbhome_1</span><br><span class="line"></span><br><span class="line">export ORACLE_SID=orcl</span><br><span class="line"></span><br><span class="line">export ORACLE_UNQNAME=orcl</span><br><span class="line"></span><br><span class="line">export NLS_LANG=.AL32UTF8</span><br><span class="line"></span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ORACLE_HOME&#125;/bin/:$ORACLE_HOME/lib64</span><br></pre></td></tr></table></figure></p><p>保存并退出后更新一下环境变量<code>source /etc/profile</code>。<br>　　最好检查一下/etc/pam.d/login，增加以下行（有了就不用增加了）： session required pam_limits.so。<br>　　检查/etc/pam.d/su，没有以下行就自己加上： session required pam_limits.so。<br>　　由于Oracle默认不支持Ubuntu，所以我们需要通过以下命令欺骗一下Oracle安装程序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /usr/lib64</span><br><span class="line"></span><br><span class="line">sudo ln -s /etc /etc/rc.d</span><br><span class="line"></span><br><span class="line">sudo ln -s /lib/x86_64-linux-gnu/libgcc_s.so.1 /lib64/</span><br><span class="line"></span><br><span class="line">sudo ln -s /usr/bin/awk /bin/awk</span><br><span class="line"></span><br><span class="line">sudo ln -s /usr/bin/basename /bin/basename</span><br><span class="line"></span><br><span class="line">sudo ln -s /usr/bin/rpm /bin/rpm</span><br><span class="line"></span><br><span class="line">sudo ln -s /usr/lib/x86_64-linux-gnu/libc_nonshared.a /usr/lib64/</span><br><span class="line"></span><br><span class="line">sudo ln -s /usr/lib/x86_64-linux-gnu/libpthread_nonshared.a /usr/lib64/</span><br><span class="line"></span><br><span class="line">sudo ln -s /usr/lib/x86_64-linux-gnu/libstdc++.so.6 /lib64/</span><br><span class="line"></span><br><span class="line">sudo ln -s /usr/lib/x86_64-linux-gnu/libstdc++.so.6 /usr/lib64/</span><br><span class="line"></span><br><span class="line">su</span><br><span class="line"></span><br><span class="line">echo &apos;Red Hat Linux release 5&apos; &gt; /etc/RedHat-release</span><br><span class="line"></span><br><span class="line">exit</span><br></pre></td></tr></table></figure></p><h2 id="三、正式安装"><a href="#三、正式安装" class="headerlink" title="三、正式安装"></a>三、正式安装</h2><p>　　将安装包解压至指定目录，本人是直接在/Home/Oracle下解压的。解压后会生成一个database目录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd /Oracle</span><br><span class="line"></span><br><span class="line">unzip linux.x64_11gR2_database_1of2.zip</span><br><span class="line"></span><br><span class="line">unzip linux.x64_11gR2_database_2of2.zip</span><br><span class="line"></span><br><span class="line">cd database/</span><br><span class="line"></span><br><span class="line">./runInstaller</span><br></pre></td></tr></table></figure></p><p>这样我们就进入了安装Oracle的图形界面了。如果发现安装界面乱码可以执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export NLS_LANG=AMERICAN_AMERICA.UTF8</span><br><span class="line"></span><br><span class="line">export LC_ALL=C</span><br></pre></td></tr></table></figure></p><p>-&gt;注：以下除了密码之外未提及支之处全部选择默认值即可。密码这个自行决定。<br>-&gt;在Configure Security Updates中去掉“I wish”，邮箱也不用填直接下一步。弹出警告框也不用管。下面同理不多赘述。<br>-&gt;在System Class中选择Server Class。<br>-&gt;选择Advanced install<br>-&gt;在Product Languages上可以添加简体中文（simplified-chinese）<br>-&gt;在Typical Installation中路径选择刚才安装包解压的目录，笔者的目录就是/Home/Oracle。输入管理员密码并确认。点击下一步，报错不管它。<br>-&gt;第十二步，选择上面的character sets进入界面 选择Use Unicode(AL32UTF8),然后选择上面Sample Schemas,进入界面后将选项打钩<br>-&gt;在Prerequis like Checks中勾选 ignore All。因为我们之前已经安装好所有的依赖了，所以只要忽略即可。这里最好还要新建一个终端跑一下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp/CVU_11.2.0.1.0_用户名</span><br><span class="line"></span><br><span class="line">sudo ./runfixup.sh</span><br></pre></td></tr></table></figure></p><p>-&gt;点击Finish开始安装。<br>-&gt;安装至68%时会报错,第一个错误（有关ins_ctx.mk）直接continue。从第二个错开始我们就要干活儿了。<br>-&gt;第二个错误，我们需要新建终端执行以下指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /Oracle/product/11.2.0/dbhome_1/sysman/lib</span><br><span class="line"></span><br><span class="line">sudo apt install gedit</span><br><span class="line"></span><br><span class="line">gedit ins_emagent.mk</span><br></pre></td></tr></table></figure></p><p>在打开的文件中找到<code>$(SYSMANBIN)emdctl</code>，将冒号后的值改为<code>$(MK_EMAGENT_NMECTL -lnnz11)</code>。在gedit中可以使用Ctrl+f进行查找。修改完毕后保存退出。点击retry。<br>-&gt;我们发现又会报错，没关系，依次执行以下指令即可。执行完retry即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i &apos;s/^\(TNSLSNR_LINKLINE.*\$(TNSLSNR_OFILES)\) \(\$(LINKTTLIBS)\)/\1 -Wl,--no-as-needed \2/g&apos; /home/rogear/tools/oracle11g/product/11.2.0/dbhome_1/network/lib/env_network.mk</span><br><span class="line"></span><br><span class="line">sudo sed -i &apos;s/^\(ORACLE_LINKLINE.*\$(ORACLE_LINKER)\) \(\$(PL_FLAGS)\)/\1 -Wl,--no-as-needed \2/g&apos; /home/rogear/tools/oracle11g/product/11.2.0/dbhome_1/rdbms/lib/env_rdbms.mk</span><br><span class="line"></span><br><span class="line">sudo sed -i &apos;s/^\(\$LD \$LD_RUNTIME\) \(\$LD_OPT\)/\1 -Wl,--no-as-needed \2/g&apos; /home/rogear/tools/oracle11g/product/11.2.0/dbhome_1/bin/genorasdksh</span><br><span class="line"></span><br><span class="line">sudo sed -i &apos;s/^\(\s*\)\(\$(OCRLIBS_DEFAULT)\)/\1 -Wl,--no-as-needed \2/g&apos; /home/rogear/tools/oracle11g/product/11.2.0/dbhome_1/srvm/lib/ins_srvm.mk</span><br></pre></td></tr></table></figure></p><p>-&gt;后面一直ok就行。</p><h2 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h2><p>首先检查一下参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo $ORACLE_BASE</span><br><span class="line"></span><br><span class="line">echo $ORACLE_HOME</span><br><span class="line"></span><br><span class="line">echo $PATH</span><br></pre></td></tr></table></figure></p><p>如果不对的话你需要看一下之前的环境变量设置。仔细查看你的路径名，包括用户名是不是自己的。参数对的话就可以启动监听了。<br><code>lsnrctl start</code><br>如果不行的话，基本上还是环境变量的问题。启动服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sqlplus /nolog</span><br><span class="line"></span><br><span class="line">conn / as sysdba</span><br><span class="line"></span><br><span class="line">startup</span><br></pre></td></tr></table></figure></p><p>可以在SQL里做个小测试<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure></p><p>成功了那你的Oracle服务器就部署成功了。</p><h1 id="4-使用Windows客户机连接服务器上的Oracle"><a href="#4-使用Windows客户机连接服务器上的Oracle" class="headerlink" title="4.使用Windows客户机连接服务器上的Oracle"></a>4.使用Windows客户机连接服务器上的Oracle</h1><h2 id="一、创建用户"><a href="#一、创建用户" class="headerlink" title="一、创建用户"></a>一、创建用户</h2><p>直至上面测试做完为止，我们的数据库用户还是只有sys这一个超级用户。我们做项目不可能只有一个用户的，这个时候我们要创建给客户用的用户。在SQL中写以下指令。(注意：SQL指令是要加分号的)。还要注意把括号内说明段删掉。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> njust2048(用户名)<span class="keyword">identified</span> <span class="keyword">by</span> <span class="keyword">admin</span>(密码);</span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">resource</span>,<span class="keyword">connect</span>,dba <span class="keyword">to</span> cs2048;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> user_sys_privs;</span><br></pre></td></tr></table></figure></p><p>对于普通用户：授予connect, resource权限。<br>对于DBA管理用户：授予connect，resource, dba权限。<br>DBA: 拥有全部特权，是系统最高权限，只有DBA才可以创建数据库结构。sysdba角色之外权限最大的角色。<br>RESOURCE:拥有Resource权限的用户只可以创建实体，不可以创建数据库结构。<br>CONNECT:拥有Connect权限的用户只可以登录Oracle，不可以创建实体，不可以创建数据库结构。</p><h2 id="二、使用创建的用户连接数据库"><a href="#二、使用创建的用户连接数据库" class="headerlink" title="二、使用创建的用户连接数据库"></a>二、使用创建的用户连接数据库</h2><p>这里有两种方案可以选择。</p><h3 id="1）使用Oracle-SQL-developor"><a href="#1）使用Oracle-SQL-developor" class="headerlink" title="1）使用Oracle SQL developor"></a>1）使用Oracle SQL developor</h3><p>这种图形界面可以分为一个大类。有兴趣或者要求的读者可以寻找其他的软件。<br>从Oracle官网上下载安装包（对应你客户机的jdk版本）并安装。进入界面。  点击加号新建连接。连接名自定义，用户名和密码使用我们刚刚创建好的用户和密码。主机名填写服务器域名。sid可以在服务器使用<code>select instance_name from v$instance;</code>查询。端口号为默认的1521。点击测试可以测试连接可靠性。测试成功后连接即可。</p><h3 id="2）使用控制台连接数据库"><a href="#2）使用控制台连接数据库" class="headerlink" title="2）使用控制台连接数据库"></a>2）使用控制台连接数据库</h3><p>在Windows下打开cmd或者power shell。执行以下命令。<br><code>sqlplus sys/password@192.168.110.30/orcl as sysdba</code>  </p><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p><a href="https://blog.csdn.net/weixin_40461281/article/details/79784429" target="_blank" rel="noopener">https://blog.csdn.net/weixin_40461281/article/details/79784429</a><br><a href="https://www.linuxidc.com/Linux/2017-12/149797.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2017-12/149797.htm</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一发入魂——小白在Ubuntu16环境下部署Oracle服务器并使用Windows客户端连接&quot;&gt;&lt;a href=&quot;#一发入魂——小白在Ubuntu16环境下部署Oracle服务器并使用Windows客户端连接&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>再次入魂——小白在CentOS7.6环境下部署Oracle11g服务器并使用Windows客户端连接</title>
    <link href="http://yoursite.com/2019/10/16/Oracle%20Install%20in%20CentOS7/"/>
    <id>http://yoursite.com/2019/10/16/Oracle Install in CentOS7/</id>
    <published>2019-10-16T07:24:47.706Z</published>
    <updated>2019-04-20T12:47:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="再次入魂——小白在CentOS7-6环境下部署Oracle11g服务器并使用Windows客户端连接"><a href="#再次入魂——小白在CentOS7-6环境下部署Oracle11g服务器并使用Windows客户端连接" class="headerlink" title="再次入魂——小白在CentOS7.6环境下部署Oracle11g服务器并使用Windows客户端连接"></a>再次入魂——小白在CentOS7.6环境下部署Oracle11g服务器并使用Windows客户端连接</h1><h1 id="1-学习几个基本Linux终端指令"><a href="#1-学习几个基本Linux终端指令" class="headerlink" title="1.学习几个基本Linux终端指令"></a>1.学习几个基本Linux终端指令</h1><p>　　由于Linux和Windows的软件安装方式有很大的不同，所以基本上都是需要在终端上敲命令行代码实现的。<br>　　一、cd（change directory）切换目录<br>　　<code>$cd　　　　　直接回到根目录</code><br>　　<code>$cd ..　　　　回到上级目录</code><br>　　<code>$cd 路径名　　切换至该路径</code><br>　　二、ls　查看文件或目录<br>　　<code>$ls　　　　　查看当前目录的文件与目录</code><br>　　<code>$cd 路径名　　查看该路径下的文件与目录</code><br>　　ls命令常用于检查目录下的文件及目录。这样我们就不用费力地去找文件管理器下的文件而是可以直接在终端中查看。当我们不确定自己创建的目录是否成功时可以轻松地使用ls查看。<br>　　三、su 和 sudo<br>　　有些时候一些指令需要我们拥有管理员权限方能执行，这个时候这两个指令就非常重要。<br>　　<code>su</code><br>　　进入root模式。su命令执行后，你需要在终端输入root密码，在终端中，密码是不显示的，输完直接敲回车即可。这是系统root用户，拥有很高的权限。值得注意的是，Ubuntu刚安装好是没有激活root的，需要我们手动激活。这时我们需要sudo指令。<br>　　<code>sudo</code><br>　　在指令的前面加上sudo 即可在管理员模式下执行指令。当然，密码还是要输的，这里输的密码是你的系统用户密码（开机密码）而不是root密码。<br>　　<code>sudo passwd root</code><br>　　执行该指令即可设定root密码。<br>　　四、vim 文档编辑<br>　　这个指令我们会在环境变量及配置文档的修改编辑中遇到。系统没有的话可在root模式中通过指令安装<br>　　<code>yum -y install vim</code><br>　　安装好之后使用指令<code>vim xxx</code>进入xxx文件。键盘敲击’i’即可进入insert模式。编辑完毕后按’esc’,在键盘上输入 <strong>‘:wq’</strong> 保存并退出。记住一定要加’冒号‘。不想保存的话用’:q’。</p><h1 id="2-安装Java并配置环境变量"><a href="#2-安装Java并配置环境变量" class="headerlink" title="2.安装Java并配置环境变量"></a>2.安装Java并配置环境变量</h1><p>　　由于Oracle是基于Java环境的数据库，所以必须要配置Java方可运行。CentOS如果你装了图形界面的话应该是自带Java的。但是没有安装jdk，如果你不需要安装sql developer(一款可视化Oracle操作工具)。那么这一步可以略过不看。<br>　　一、卸载系统自带JDK<br>　　依次执行如下指令<br>　　<code>rpm -qa | grep java</code><br>　　命令说明：<br>　　rpm 　　管理套件<br>　　-qa 　　使用询问模式，查询所有套件<br>　　grep　　查找文件里符合条件的字符串<br>　　java 　　查找包含java字符串的文件<br>　　将除了.noarch文件的Java文件全删了。进入root用户，输入<br>　<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -e --nodeps java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64</span><br><span class="line">rpm -e --nodeps java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64</span><br><span class="line">rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64</span><br><span class="line">rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64</span><br></pre></td></tr></table></figure></p><p>　　命令介绍：<br>　　-e                      删除指定套件<br>　　–nodeps        不验证套件档的相互关联性<br>　　检查一下是否删除成功<br>　　<code>java -version</code><br>　　若未找到Java命令代表删除成功，若没有成功可用<code>yum -y remove</code>指令删一下。<br>　　二、安装JDK<br>　　从各种网站上找到你所需要的JDK版本并下载，这个看你自己，我下的是从官网上找的1.8。下载完毕打开安装目录，在目录中打开终端。将文件复制到/usr/java目录中并解压。<br>　　<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">　　su</span><br><span class="line">　　cp 安装包文件名 /usr/java</span><br><span class="line">　　tar -zxvf 文件名</span><br><span class="line">　　rm -f 安装包文件名</span><br></pre></td></tr></table></figure></p><p>　　三、JDK环境变量的配置<br>　　通过指令<br>　　<code>sudo vim /etc/profile</code><br>　　打开profile文件，此文件存储Linux中的各种环境变量，敲击’i’在文件末尾加入以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_144</span><br><span class="line"></span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/jre/lib/rt.jar:$&#123;JRE_HOME&#125;/lib/dt.jar:$&#123;JAVA_HOME&#125;/lib/tools.jar</span><br><span class="line"></span><br><span class="line">export PATH=$PATH:$&#123;JAVA_HOME&#125;/bin:</span><br></pre></td></tr></table></figure></p><p>如何保存并退出在上一章节已经有提到，以后章节不再赘述。保存完毕后我们先要更新一下系统参数<code>source /etc/profile</code>在终端测试一下是否安装成功。依次输入指令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo %JAVA_HOME   </span><br><span class="line">java -version</span><br></pre></td></tr></table></figure></p><p>若出现我们添加进profile文件中的路径以及正确的java版本号则安装成功。若未出现，可能你需要检查一下profile文件或者java安装包。</p><h1 id="3-安装前的准备工作"><a href="#3-安装前的准备工作" class="headerlink" title="3.安装前的准备工作"></a>3.安装前的准备工作</h1><p>在进行各种依赖的下载还有乱七八糟的事之前，我们先把Oracle的安装包下载任务开始起来，这样就不需要多等一段时间了。Oracle11g的安装包在官网很容易找到，注意一定要将两个压缩包全部下载下来。最好还能定点下载到一个<strong>指定的目录</strong>里。本人就是将其下载至主文件夹下的<strong>Oracle</strong>文件夹下。这样方便后续的操作。<br>注意：此处所用的指令都需要root老大哥才能完成。出错的时候先看看是不是权限的问题。</p><h2 id="一、用户组创建并更改OS系统标志"><a href="#一、用户组创建并更改OS系统标志" class="headerlink" title="一、用户组创建并更改OS系统标志"></a>一、用户组创建并更改OS系统标志</h2><p>运行下列指令通过命令行使用root模式创建用户和用户组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">su</span><br><span class="line">groupadd oinstall</span><br><span class="line">groupadd dba</span><br><span class="line">useradd -g oinstall -g dba -m oracle</span><br></pre></td></tr></table></figure></p><p>查询用户组是否成功加入到用户组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groups oracle</span><br></pre></td></tr></table></figure></p><p>设置oracle用户登录密码<br><code>passwd oracle</code><br>由于Oracle默认只支持redhat，不支持Ubuntu、centos等其他Linux系统，所以将系统标志修改成RedHat-7<br><code>vim /etc/redhat-release</code><br>内容修改为<code>redhat-7</code>。<br>关闭防火墙。<br><code>systemctl stop firewalld</code><br>其实可以仅仅开放你所需要的端口。笔者在这里使用的是9999端口，Oracle默认的是1521端口。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=9999/tcp --permanent  </span><br><span class="line"></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></p><p>关闭selinux（重启后生效）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/selinux/config</span><br><span class="line">//修改SELINUX=disabled并去掉#</span><br></pre></td></tr></table></figure></p><p>重启并进入oracle用户<br><code>reboot</code><br>注意：在生产环境下不可关闭防火墙和selinux。</p><h2 id="二、创建Oracle数据库安装目录"><a href="#二、创建Oracle数据库安装目录" class="headerlink" title="二、创建Oracle数据库安装目录"></a>二、创建Oracle数据库安装目录</h2><p>创建目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/oracle</span><br><span class="line">mkdir -p /data/oraInventory</span><br><span class="line">mkdir -p /data/database</span><br></pre></td></tr></table></figure></p><p>注意：这里使用的都是绝对路径，即在前面有个‘/’。<br>接下来将这些文件夹的使用权限都赋给我们刚刚创建的oracle用户。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /data</span><br><span class="line">ls</span><br><span class="line">chown -R oracle:oinstall /data/oracle</span><br><span class="line">chown -R oracle:oinstall /data/oraInventory</span><br><span class="line">chown -R oracle:oinstall /data/database</span><br></pre></td></tr></table></figure></p><h2 id="三-、依赖包的安装"><a href="#三-、依赖包的安装" class="headerlink" title="三 、依赖包的安装"></a>三 、依赖包的安装</h2><p>　　Linux不同于Windows，这些东西都需要我们自己手动去安装。要装的东西多的要死，这里用yum指令进行批量安装，要稍等一会儿。<br><code>yum install binutils-2.* compat-libstdc++-33* elfutils-libelf-0.* elfutils-libelf-devel-* gcc-4.* gcc-c++-4.* glibc-2.* glibc-common-2.* glibc-devel-2.* glibc-headers-2.* ksh-2* libaio-0.* libaio-devel-0.* libgcc-4.* libstdc++-4.* libstdc++-devel-4.* make-3.* sysstat-7.* unixODBC-2.* unixODBC-devel-2.* pdksh*</code> </p><h2 id="四、配置系统内核参数"><a href="#四、配置系统内核参数" class="headerlink" title="四、配置系统内核参数"></a>四、配置系统内核参数</h2><p>　　这里我们可以直接开两个终端来配，查一个配一个比较方便。<br>　　新建一个终端键入指令<code>sudo vim /etc/sysctl.conf</code>。<br>　　原终端按下列指令依次查出对应参数的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/sbin/sysctl -a | grep sem</span><br><span class="line"></span><br><span class="line">/sbin/sysctl -a | grep file-max</span><br><span class="line"></span><br><span class="line">/sbin/sysctl -a | grep aio-max</span><br><span class="line"></span><br><span class="line">/sbin/sysctl -a | grep ip_local_port_range</span><br><span class="line"></span><br><span class="line">/sbin/sysctl -a | grep rmem_default</span><br><span class="line"></span><br><span class="line">/sbin/sysctl -a | grep rmem_max</span><br><span class="line"></span><br><span class="line">/sbin/sysctl -a | grep wmem_default</span><br><span class="line"></span><br><span class="line">/sbin/sysctl -a | grep wmem_max</span><br><span class="line"></span><br><span class="line">/sbin/sysctl -a | grep shmall</span><br><span class="line"></span><br><span class="line">/sbin/sysctl -a | grep shmmax</span><br><span class="line"></span><br><span class="line">/sbin/sysctl -a | grep shmmni</span><br></pre></td></tr></table></figure></p><p>　　再将值填入对应的参数中并添加至新终端的’sysctl.conf’的末尾并保存退出。确保填入的值尽量是默认的内核参数，但是不能少于下列示例。　　<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.icmp_echo_ignore_broadcasts = 1</span><br><span class="line">net.ipv4.conf.all.rp_filter = 1</span><br><span class="line">fs.file-max = 6815744 #设置最大打开文件数</span><br><span class="line">fs.aio-max-nr = 1048576</span><br><span class="line">kernel.shmall = 2097152 #共享内存的总量，8G内存设置：2097152*4k/1024/1024</span><br><span class="line">kernel.shmmax = 2147483648 #最大共享内存的段大小</span><br><span class="line">kernel.shmmni = 4096 #整个系统共享内存端的最大数</span><br><span class="line">kernel.sem = 250 32000 100 128</span><br><span class="line">net.core.rmem_default = 262144</span><br><span class="line">net.core.rmem_max= 4194304</span><br><span class="line">net.core.wmem_default= 262144</span><br><span class="line">net.core.wmem_max= 1048576</span><br><span class="line">net.ipv4.ip_local_port_range = 1000 65500 #可使用的IPv4端口范围</span><br></pre></td></tr></table></figure></p><p>更新内核参数<code>sysctl -p</code>。  </p><h2 id="五、配置Oracle环境变量"><a href="#五、配置Oracle环境变量" class="headerlink" title="五、配置Oracle环境变量"></a>五、配置Oracle环境变量</h2><p>　　现在我们要配置Oracle的环境变量。<code>sudo vim /home/oracle/.bash_profile</code>  。将下列内容添加至文件后面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">export ORACLE_BASE=/data/oracle</span><br><span class="line"></span><br><span class="line">export ORACLE_HOME=$ORACLE_BASE/product/11.2.0/dbhome_1</span><br><span class="line"></span><br><span class="line">export ORACLE_SID=orcl</span><br><span class="line"></span><br><span class="line">export ORACLE_UNQNAME=orcl</span><br><span class="line"></span><br><span class="line">export ORACLE_TERM=xterm</span><br><span class="line"></span><br><span class="line">export LD_LIBRARY_PATH=$ORACLE_HOME/lib:/lib:/usr/lib #添加系统环境变量</span><br><span class="line"></span><br><span class="line">export LANG=C #防止安装过程出现乱码</span><br><span class="line"></span><br><span class="line">export NLS_LANG=AMERICAN_AMERICA.ZHS16GBK  #设置Oracle客户端字符集，必须与Oracle安装时设置的字符集保持一致</span><br><span class="line"></span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ORACLE_HOME&#125;/bin/:/usr/sbin</span><br></pre></td></tr></table></figure></p><p>保存并退出后更新一下环境变量<code>source /home/oracle/.bash_profile</code>。</p><h2 id="三、正式安装"><a href="#三、正式安装" class="headerlink" title="三、正式安装"></a>三、正式安装</h2><p>　　将安装包解压至指定目录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">unzip linux.x64_11gR2_database_1of2.zip -d /data/database</span><br><span class="line"></span><br><span class="line">unzip linux.x64_11gR2_database_2of2.zip -d /data/database</span><br><span class="line"></span><br><span class="line">chown -R oracle:oinstall /data</span><br><span class="line"></span><br><span class="line">cd /data/database/database</span><br><span class="line"></span><br><span class="line">ls</span><br><span class="line"></span><br><span class="line">./runInstaller</span><br></pre></td></tr></table></figure></p><p>这样我们就进入了安装Oracle的图形界面了。<br>注意：这样做有的情况会出现提示条只出现白条的问题，这样我们就无法进行下一步了，甚至连退出都够呛。笔者就出现过这种情况。这个我们参考<a href="https://blog.csdn.net/ykyorky/article/details/79259424?utm_source=blogxgwz6中的解决方案。使用指令" target="_blank" rel="noopener">https://blog.csdn.net/ykyorky/article/details/79259424?utm_source=blogxgwz6中的解决方案。使用指令</a><br><code>./runInstall -jreLoc JDK安装路径</code><br>进行安装<br>-&gt;注：以下除了密码之外未提及支之处全部选择默认值即可。密码这个自行决定。<br>-&gt;在Configure Security Updates中去掉“I wish”，邮箱也不用填直接下一步。弹出警告框也不用管。下面同理不多赘述。<br>-&gt;在Installation option中选择install database software only<br>-&gt;在Grid Installation中选择single instance database installation<br>-&gt;在Product Languages上可以添加简体中文（simplified-chinese）<br>-&gt;在Select Database Edition选择企业版（enterprise）<br>-&gt;在Typical Installation中路径选择刚才安装包解压的目录，笔者的目标目录在上面已经写好，不多赘述。输入密码并确认。点击下一步，报错不管它。<br>-&gt;第十二步，选择上面的character sets进入界面 选择Use Unicode(AL32UTF8),然后选择上面Sample Schemas,进入界面后将选项打钩<br>-&gt;在Prerequis like Checks中勾选 ignore All。因为我们之前已经安装好所有的依赖了，所以只要忽略即可。这里最好还要新建一个终端跑一下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp/CVU_11.2.0.1.0_用户名</span><br><span class="line"></span><br><span class="line">sudo ./runfixup.sh</span><br></pre></td></tr></table></figure></p><p>-&gt;点击Finish开始安装。<br>-&gt;安装时会报错,新建终端敲一下指令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">su</span><br><span class="line"></span><br><span class="line">yum -y install glibc-static</span><br><span class="line"></span><br><span class="line">vim /data/oracle/product/11.2.0/db_1/ctx/lib/ins_ctx.mk</span><br></pre></td></tr></table></figure></p><p>将<br><code>ctxhx: $(CTXHXOBJ)       $(LINK_CTXHX) $(CTXHXOBJ) $(INSO_LINK)</code><br>修改为：<br><code>ctxhx: $(CTXHXOBJ)       -static $(LINK_CTXHX) $(CTXHXOBJ) $(INSO_LINK) /usr/lib64/libc.a</code><br>接着再改一下ins_emagent.mk文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /data/oracle/product/11.2.0/dbhome_1/sysman/lib</span><br><span class="line"></span><br><span class="line">yum -y install gedit</span><br><span class="line"></span><br><span class="line">gedit ins_emagent.mk</span><br></pre></td></tr></table></figure></p><p>在打开的文件中找到<code>$(SYSMANBIN)emdctl</code>，将冒号后的值改为<code>$(MK_EMAGENT_NMECTL -lnnz11)</code>。在gedit中可以使用Ctrl+f进行查找。修改完毕后保存退出。<br>点击retry。<br>如果出现很多权限问题可自行百度，笔者碰到过一个坑但是解决方法忘了，大致就是改一下配置文件或者授予文件夹权限之类的。<br>-&gt;后面一直ok就行。</p><h2 id="四、配置监听并创建数据库实例测试"><a href="#四、配置监听并创建数据库实例测试" class="headerlink" title="四、配置监听并创建数据库实例测试"></a>四、配置监听并创建数据库实例测试</h2><p>首先检查一下参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo $ORACLE_BASE</span><br><span class="line"></span><br><span class="line">echo $ORACLE_HOME</span><br><span class="line"></span><br><span class="line">echo $PATH</span><br></pre></td></tr></table></figure></p><p>如果不对的话你需要看一下之前的环境变量设置。仔细查看你的路径名，包括用户名是不是自己的。参数对的话就可以启动监听了。  </p><h2 id="1）配置监听"><a href="#1）配置监听" class="headerlink" title="1）配置监听"></a>1）配置监听</h2><p>我们使用命令<code>netca</code>进行监听的设定。<br>注意：如果你所使用的端口号在步骤3.1中没有打开，那么是无法创建监听的。这里面基本没什么不懂的，看得懂英文就行。只不过要注意在选择协议的时候选择TCP。出错的话可能是环境变量的问题或者是文件夹权限的问题，问题都不是很大。</p><h2 id="2）创建一个Oracle数据库实例"><a href="#2）创建一个Oracle数据库实例" class="headerlink" title="2）创建一个Oracle数据库实例"></a>2）创建一个Oracle数据库实例</h2><p>如果你看了别的教程在安装阶段就已经创建了数据库实例，那么可以跳过本步骤。这里说的是没有创建数据库实例的情况。执行<code>dbca</code>命令进入图形界面。点击next即可进入下一步。<img src="https://img-blog.csdnimg.cn/20190408233533957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNjcwMzA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择“create a database”<br><img src="https://img-blog.csdnimg.cn/20190408233707292.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNjcwMzA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择“custom dataase”<br><img src="https://img-blog.csdnimg.cn/20190408234023515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNjcwMzA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>填入之前在环境变量文件中写的sid，如果上面你是直接复制的话那么填入<code>orcl</code>即可，想换的话也行，不过要把环境变量中的一起换掉。<br><img src="https://img-blog.csdnimg.cn/20190408234033157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNjcwMzA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>后面笔者懒得叙述了，反正基本都能成功，觉得讲得不够详细可以看我最后一章参考的资料。出错按照错误代码百度相应的解决方案。笔者遇到的错误比较奇葩。提示的是我共享内存空间不足了，于是我找了很多解决方案，最简单的还是直接reboot重启（重启大法好啊）。</p><h2 id="3）测试"><a href="#3）测试" class="headerlink" title="3）测试"></a>3）测试</h2><p>新开一个终端，写入下列命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sqlplus /nolog</span><br><span class="line"></span><br><span class="line">conn / as sysdba</span><br></pre></td></tr></table></figure></p><p>这样你就可以用sys超级管理员用户连接我们刚刚创建的数据库实例orcl了。<br>可以在SQL里做个小测试<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure></p><p>成功了那你的Oracle服务器就部署成功了。</p><h1 id="4-使用Windows客户机连接服务器上的Oracle"><a href="#4-使用Windows客户机连接服务器上的Oracle" class="headerlink" title="4.使用Windows客户机连接服务器上的Oracle"></a>4.使用Windows客户机连接服务器上的Oracle</h1><h2 id="一、创建用户"><a href="#一、创建用户" class="headerlink" title="一、创建用户"></a>一、创建用户</h2><p>直至上面测试做完为止，我们的数据库用户还是只有sys这一个超级用户。我们做项目不可能只有一个用户的，这个时候我们要创建给客户用的用户。在SQL中写以下指令。(注意：SQL指令是要加分号的)。还要注意把括号内说明段删掉。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> njust2048(用户名)<span class="keyword">identified</span> <span class="keyword">by</span> <span class="keyword">admin</span>(密码);</span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">resource</span>,<span class="keyword">connect</span>,dba <span class="keyword">to</span> cs2048;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> user_sys_privs;</span><br></pre></td></tr></table></figure></p><p>对于普通用户：授予connect, resource权限。<br>对于DBA管理用户：授予connect，resource, dba权限。<br>DBA: 拥有全部特权，是系统最高权限，只有DBA才可以创建数据库结构。sysdba角色之外权限最大的角色。<br>RESOURCE:拥有Resource权限的用户只可以创建实体，不可以创建数据库结构。<br>CONNECT:拥有Connect权限的用户只可以登录Oracle，不可以创建实体，不可以创建数据库结构。</p><h2 id="二、使用创建的用户连接数据库"><a href="#二、使用创建的用户连接数据库" class="headerlink" title="二、使用创建的用户连接数据库"></a>二、使用创建的用户连接数据库</h2><p>这里有两种方案可以选择。</p><h3 id="1）使用Oracle-SQL-developor"><a href="#1）使用Oracle-SQL-developor" class="headerlink" title="1）使用Oracle SQL developor"></a>1）使用Oracle SQL developor</h3><p>这种图形界面可以分为一个大类。有兴趣或者要求的读者可以寻找其他的软件。使用Oracle SQL developer的话必须要安装jdk才行。从Oracle官网上下载安装包（对应你客户机的jdk版本）并安装。进入界面。  点击加号新建连接。连接名自定义，用户名和密码使用我们刚刚创建好的用户和密码。主机名填写服务器域名。sid可以在服务器使用<code>select instance_name from v$instance;</code>查询。端口号为默认的1521。点击测试可以测试连接可靠性。测试成功后连接即可。</p><h3 id="2）使用控制台连接数据库"><a href="#2）使用控制台连接数据库" class="headerlink" title="2）使用控制台连接数据库"></a>2）使用控制台连接数据库</h3><p>在Windows下打开cmd或者power shell。执行以下命令。<br><code>sqlplus cs2048/2048@192.168.1.113:1521/orcl</code><br>这样你就可以连接至服务器的数据库。注意，这里的参数顺序分别是：<br>cs2048（用户名）；2048（密码）；192.168.1.113（服务器IP）；orcl（服务名）</p><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p><a href="https://www.cnblogs.com/muhehe/p/7816808.html" target="_blank" rel="noopener">https://www.cnblogs.com/muhehe/p/7816808.html</a><br><a href="https://blog.csdn.net/ykyorky/article/details/79259424?utm_source=blogxgwz6" target="_blank" rel="noopener">https://blog.csdn.net/ykyorky/article/details/79259424?utm_source=blogxgwz6</a><br><a href="https://www.cnblogs.com/buxingzhelyd/p/7865194.html" target="_blank" rel="noopener">https://www.cnblogs.com/buxingzhelyd/p/7865194.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;再次入魂——小白在CentOS7-6环境下部署Oracle11g服务器并使用Windows客户端连接&quot;&gt;&lt;a href=&quot;#再次入魂——小白在CentOS7-6环境下部署Oracle11g服务器并使用Windows客户端连接&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
    
      <category term="CentOS,Linux" scheme="http://yoursite.com/tags/CentOS-Linux/"/>
    
  </entry>
  
  <entry>
    <title>NS2学习笔记（三）</title>
    <link href="http://yoursite.com/2019/06/03/NS2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://yoursite.com/2019/06/03/NS2学习笔记（三）/</id>
    <published>2019-06-03T03:52:37.000Z</published>
    <updated>2019-06-03T11:58:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NS2节点"><a href="#NS2节点" class="headerlink" title="NS2节点"></a>NS2节点</h1><p>节点是网络拓扑的重要组成部分，是NS2符合网络组件的一个大类。这里对应NS手册的第五章。</p><h2 id="节点基本元素"><a href="#节点基本元素" class="headerlink" title="节点基本元素"></a>节点基本元素</h2><p>建立节点基本命令：<br><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> ns [new Simulator]</span><br><span class="line">$ns node</span><br></pre></td></tr></table></figure></p><p>一个（单播）节点的典型结构包含两个TclObject：一个地址分类器（classifier_）和一个端口分类器（dmux_）。这些分类器的功能是将传入的包分派至正确的代理或者链路出口去。<br>每个节点至少包含以下部分：</p><ul><li>一个地址或（id_），初始值为0，当节点建立时，模拟的名字控件将自动加1；</li><li>一个邻居链表（neighbor_）；</li><li>一个代理链表（agnet_）;</li><li>一个节点类型识别器（nodetype_）；</li><li>一个路由模块</li></ul><p>建立多播节点时需要进行设置<br><code>set ns [new Simulator -multicast on]</code></p><h2 id="设置节点"><a href="#设置节点" class="headerlink" title="设置节点"></a>设置节点</h2><h3 id="控制函数"><a href="#控制函数" class="headerlink" title="控制函数"></a>控制函数</h3><ul><li>$node entry：返回节点的入口指针</li><li>$node reset：重新设置节点上的所有代理<h3 id="地址和端口号管理"><a href="#地址和端口号管理" class="headerlink" title="地址和端口号管理"></a>地址和端口号管理</h3></li><li>$node id：返回节点的节点号，该号码是在类Simulator用方法$ns node创建每个节点自动生成和赋值的</li><li>$node agent(port)：返回一个端口号为port的代理的句柄。若代理不存在则返回空字符串。</li><li>add-route和add-toutes：单播的时候用来增加路由路径从而产生classifier_。使用语法为<code>$node add-route &lt;destination id&gt; &lt;TclObject&gt;</code>。TclObject是dmux_的入口，节点的多路复用端口。add-routes用于已添加多重路由路径到同一个目的地。</li><li>delete-routes()</li><li>init-routing()和rtObject()。前者设置实例变量mutiPath_，使之与同名的类变量相同。同时给该节点的路由控制器对象增加一个实例变量rtObject_；后者返回该节点的路由对象的句柄。</li></ul><p>最后，当节点上的一个链路关联改变状态时，过程intf-changed()可以被网络动态代码激活。</p><h3 id="代理管理"><a href="#代理管理" class="headerlink" title="代理管理"></a>代理管理</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;NS2节点&quot;&gt;&lt;a href=&quot;#NS2节点&quot; class=&quot;headerlink&quot; title=&quot;NS2节点&quot;&gt;&lt;/a&gt;NS2节点&lt;/h1&gt;&lt;p&gt;节点是网络拓扑的重要组成部分，是NS2符合网络组件的一个大类。这里对应NS手册的第五章。&lt;/p&gt;
&lt;h2 id=&quot;节
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C++不知名库函数</title>
    <link href="http://yoursite.com/2019/06/03/C-%E4%B8%8D%E7%9F%A5%E5%90%8D%E5%BA%93%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/06/03/C-不知名库函数/</id>
    <published>2019-06-03T02:10:52.000Z</published>
    <updated>2019-06-03T02:10:54.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>NS2学习笔记（二）——分裂对象模型</title>
    <link href="http://yoursite.com/2019/05/31/NS2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2019/05/31/NS2学习笔记（二）/</id>
    <published>2019-05-31T07:40:09.000Z</published>
    <updated>2019-06-03T03:52:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解释器相关类的介绍和用途"><a href="#解释器相关类的介绍和用途" class="headerlink" title="解释器相关类的介绍和用途"></a>解释器相关类的介绍和用途</h1><h2 id="Tcl类"><a href="#Tcl类" class="headerlink" title="Tcl类"></a>Tcl类</h2><p>封装了OTcl解释器的实例，并提供了访问解释器的方法，提供访问Tcl库的接口。该类提供如下操作方法：</p><ul><li><strong>1、获取Tcl实例句柄</strong><br>Tcl类只有一个实例，该实例在NS2启动时初始化，获取Tcl类的实例方法是<br><code>Tcl&amp; tcl = Tcl::instance();</code></li><li><p><strong>2、用来调用OTcl命令函数</strong><br>获得Tcl解释器引用之后可通过这个引用来调用OTcl中的控制台命令，现有4中方法通过Tcl实例来调用OTcl命令，主要区别是调用函数的不同。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tcl.eval(s)               <span class="comment">//执行已经存储进tcl返回区的命令，并返回给结果变量</span></span><br><span class="line">tcl.eval(<span class="keyword">char</span>* s)         <span class="comment">//执行字符串s，并在tcl的结果变量中保存执行结果</span></span><br><span class="line">tcl.evalc(<span class="keyword">const</span> cahr* s)  <span class="comment">//首先把s存储进tcl的命令缓冲区，然后在执行s命令，并在结果变量中返回结果</span></span><br><span class="line">tcl.evalf(<span class="keyword">const</span> <span class="keyword">char</span>* s,...)  <span class="comment">//类似于c语言中的printf命令，可以进行字符串的过滤，执行同tcl.evalc。</span></span><br></pre></td></tr></table></figure></li><li><p><strong>3、传递/返回OTcl命令运行的结果</strong><br>当C++程序中调用一个OTcl命令是，解释器将执行结果保存在私有成员变量tcl_-&gt;results中，用户必须用tcl.result(void)来获取该执行结果，若结果是字符串，必须被转换为适当的类型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tcl.evalc(<span class="string">"Simulator set NumberInterfaces_"</span>);</span><br><span class="line">cahr *ni = tcl.result();</span><br><span class="line"><span class="keyword">if</span>( atoi(ni)!=<span class="number">1</span> ) <span class="comment">//将字符串转换成整数</span></span><br><span class="line">  tcl.evalc(Simulator <span class="built_in">set</span> NumberInterfaces_1);</span><br></pre></td></tr></table></figure><p>Tcl类的结果返回，与脚本执行的退出码也有所不同，例如</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( <span class="built_in">strcmp</span>(argv[<span class="number">1</span>],<span class="string">"now"</span>) == <span class="number">0</span> )&#123;</span><br><span class="line">    tcl.resultf(<span class="string">"%.17g"</span>,clock());</span><br><span class="line">    <span class="keyword">return</span> TCL_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>4、存储并查询TclObject对象</strong><br>在NS2中的Tcl命令解释器中保存了一个存储对象地址的哈希表，NS2为每一个在模拟过程中生成的TclObject类以及派生类的对象在该哈希表中保存了一个指针，用于快速查找这些对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Tcl.enter(TclObjuct* o)   <span class="comment">//在哈希表中加入一个对象</span></span><br><span class="line">Tcl.lookup(<span class="keyword">char</span>* s)       <span class="comment">//在哈希表中查询名字为s的对象并返回</span></span><br><span class="line">Tcl.remove(TclObject* o)  <span class="comment">//在哈希表中删除该对象的地址</span></span><br></pre></td></tr></table></figure></li><li><p><strong>5、获的Tcl解释器的句柄，来对解释器进行直接访问</strong><br>函数<code>Tcl.interp(void)</code>是Tcl的解释器句柄，可以对其进行修改，加入自己的解释器。</p><h2 id="TclObject类"><a href="#TclObject类" class="headerlink" title="TclObject类"></a>TclObject类</h2><p>TclObject类是OTcl/C++两个面向对象语言的类的基库，封装了绑定、跟踪和对相关命令的调用机制。</p></li><li><p>1、创建/清除模拟器组件的对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> tcp1 [<span class="keyword">new</span> Agent/TCP]</span><br><span class="line"><span class="keyword">delete</span> $tcp1</span><br></pre></td></tr></table></figure></li><li><p>2、实现从C++类成员变量到OTcl类成员变量的绑定</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bind(<span class="string">"distance_"</span>,&amp;distance)   <span class="comment">//绑定实数变量</span></span><br><span class="line">bind_time(<span class="string">"lastSent_"</span>,&amp;lastSessSent)   <span class="comment">//绑定时间变量</span></span><br><span class="line">bind_bw       <span class="comment">//绑定带宽变量</span></span><br><span class="line">bind_boll     <span class="comment">//绑定布尔型变量</span></span><br></pre></td></tr></table></figure><p>以上一个是OTcl变量名，一个是对应C++成员变量地址。</p></li><li>3、实现变量跟踪</li><li>4、实现从C++类的成员函数到OTcl类的成员函数之间的一一对应<br>  通过command()函数事项。由于command()是TclObject的成员函数，所以它的派生类的每个对象都可以重写该函数。  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">argc:命令行参数个数</span></span><br><span class="line"><span class="comment">*argv:命令行参数向量：argv[0]:cmd;argv[1]指定想要的操作;argv[2...argc-1]用户还指定的参数</span></span><br><span class="line"><span class="comment">参数以字符串形式给出，若操作匹配成功则返回操作结果；若操作不匹配则调用父类command()一直到匹配为止，若都不匹配则返回错误信号</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Int MobileNode::command(<span class="keyword">int</span> argc,<span class="keyword">const</span> <span class="keyword">char</span>*<span class="keyword">const</span>* argv)</span><br><span class="line">&#123;</span><br><span class="line">  Tcl&amp;tcl = Tcl::instance();</span><br><span class="line">  <span class="keyword">if</span>( argc == <span class="number">5</span> )&#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="built_in">strcmp</span>(argv[<span class="number">1</span>],<span class="string">"setdest"</span>)==<span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>( set_destination( atof(argv[<span class="number">2</span>]),atof(argv[<span class="number">3</span>]),atof(argv[<span class="number">4</span>]) )&lt;<span class="number">0</span> )</span><br><span class="line">      <span class="keyword">return</span> TCL_ERROR;</span><br><span class="line">      <span class="keyword">return</span> TCL_OK;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>( SRMAgent::command(argc,argv) );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="TclClass类"><a href="#TclClass类" class="headerlink" title="TclClass类"></a>TclClass类</h2><p>TclClass类用于注册编译，保持了编译分级的层次结构，同时给OTcl对象提供了创建C++对象的方法。<br><code>set o [new B/A]</code><br>对象o的解释构造函数在ns第一次启动时执行：</p><ul><li>次构造函数以解释器类的名字B/A调用ABClass的构造函数；</li><li>然后，ABClass构造函数调用其父类TclClass的构造函数；</li><li>TclClass构造函数存储类的名字，并将对象插入TclClass对象链中；</li><li>在simulator的初始化过程中，Tcl_AppInit(void)调用TclClass::bind(void)。bind()调用以解释类的名字作为参数的register{},register{}建立类层次，生成需要却还没有的类；</li><li>最后，bind()为新类定义实例过程create-shadow和delete-shadow，生成并返回对象o。<h2 id="TclCommand类"><a href="#TclCommand类" class="headerlink" title="TclCommand类"></a>TclCommand类</h2>TclCommand类用于定义简单的全局解释命令。TclCommand类也是纯虚函数。需要派生类实现两个成员函数：构造函数和command()。<h2 id="EmbeddedTcl类"><a href="#EmbeddedTcl类" class="headerlink" title="EmbeddedTcl类"></a>EmbeddedTcl类</h2>用户对脚本~tclcl/tcl-object.tck进行修改，增加tcl/lib的文件来对ns进行扩展。对于新文件的装载是由该类完成的。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> EmbeddedTcl::load()&#123;</span><br><span class="line">  Tcl::instance().evalc(code_);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="InstVar类"><a href="#InstVar类" class="headerlink" title="InstVar类"></a>InstVar类</h2><p>包含了从OTcl访问C++类成员变量的方法。</p><h1 id="OTcl与C-之间的连接"><a href="#OTcl与C-之间的连接" class="headerlink" title="OTcl与C++之间的连接"></a>OTcl与C++之间的连接</h1><p>主要实现以下三个功能：</p><ul><li>动态创建一个新的C++对象；</li><li>访问该C++对象的属性；</li><li>调用该C++对象的方法。<h2 id="调用C-对象的方法"><a href="#调用C-对象的方法" class="headerlink" title="调用C++对象的方法"></a>调用C++对象的方法</h2></li><li>注册顶级命令<br>使用command方法</li><li>暴露C++对象方法</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;解释器相关类的介绍和用途&quot;&gt;&lt;a href=&quot;#解释器相关类的介绍和用途&quot; class=&quot;headerlink&quot; title=&quot;解释器相关类的介绍和用途&quot;&gt;&lt;/a&gt;解释器相关类的介绍和用途&lt;/h1&gt;&lt;h2 id=&quot;Tcl类&quot;&gt;&lt;a href=&quot;#Tcl类&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>NS2学习笔记（一）</title>
    <link href="http://yoursite.com/2019/05/29/NS2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/05/29/NS2学习笔记（一）/</id>
    <published>2019-05-29T07:58:38.000Z</published>
    <updated>2019-05-31T07:39:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TCL简介"><a href="#TCL简介" class="headerlink" title="TCL简介"></a>TCL简介</h1><h2 id="变量和变量赋值"><a href="#变量和变量赋值" class="headerlink" title="变量和变量赋值"></a>变量和变量赋值</h2><p>无需事先声明，使用set指令对变量进行首次赋值，使用变量时前面要加$符号。<br><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> a <span class="string">"hello world"</span></span><br><span class="line"><span class="keyword">puts</span> <span class="string">"NS2 say $"</span></span><br></pre></td></tr></table></figure></p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>使用双引号将其括起来为单词赋值。</p><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><p>tcl包含很多表达式，使用expr指令求数学表达式的值或关系表达式的真假。<br><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> value [<span class="keyword">expr</span> <span class="number">2</span>+<span class="number">3</span>]</span><br></pre></td></tr></table></figure></p><h2 id="指令替代"><a href="#指令替代" class="headerlink" title="指令替代"></a>指令替代</h2><p>使用中括号进行指令替代。指令替代可以将“tcl脚本的执行结果”取代“tcl脚本”。<br><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">puts</span> <span class="string">"I am [expr 10*2] years old"</span></span><br></pre></td></tr></table></figure></p><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><ul><li><p>选择结构</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>&#123;$a==<span class="string">"hello"</span>&#125;&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">else <span class="keyword">if</span>&#123;&#125;&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> $a&#123;</span><br><span class="line">    <span class="number">2</span> &#123;<span class="keyword">puts</span> $a&#125;</span><br><span class="line">    <span class="number">3</span> &#123;&#125;</span><br><span class="line">    default &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>循环结构</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;<span class="keyword">set</span> i <span class="number">0</span>&#125;&#123;$i&lt;<span class="number">5</span>&gt;&#125;&#123;<span class="keyword">incr</span> i <span class="number">1</span>&#125;&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>( $i&lt;<span class="number">5</span> )&#123;</span><br><span class="line">    <span class="keyword">incr</span> i <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> vowel &#123;a e i o u&#125;&#123;</span><br><span class="line">    <span class="keyword">puts</span> <span class="string">"$vowel is a vowel"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>与c++函数类似<br><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">proc</span><span class="title"> sum_proc</span> &#123;a b&#125;&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">expr</span> $a + $b]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">puts</span> <span class="string">"sum is [sum_proc 1 2]"</span></span><br></pre></td></tr></table></figure></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>无需像C语言一样需要事先声明数组大小<br><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> a(<span class="number">0</span>) <span class="string">"Zero"</span></span><br><span class="line"><span class="keyword">puts</span> $a(0)</span><br></pre></td></tr></table></figure></p><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> f [<span class="keyword">open</span> <span class="string">"filename"</span> <span class="string">"w/r"</span>]</span><br><span class="line"><span class="keyword">puts</span> $f <span class="string">"1"</span></span><br><span class="line"><span class="keyword">close</span> $f</span><br></pre></td></tr></table></figure><h2 id="eval命令"><a href="#eval命令" class="headerlink" title="eval命令"></a>eval命令</h2><p>语法：<code>eval arg1.arg2.arg3,...</code><br>含义：将所有的参数连起来作为命令语句执行<br><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">file</span>.txt中存放</span><br><span class="line"><span class="number">1</span> + <span class="number">2</span></span><br><span class="line"><span class="number">4</span> + <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> infile [<span class="keyword">open</span> <span class="string">"/file.txt"</span> <span class="string">"r"</span>]</span><br><span class="line"><span class="keyword">while</span> &#123;[<span class="keyword">gets</span> $infile Op]&lt;=<span class="number">0</span>&#125;&#123;</span><br><span class="line">    <span class="keyword">set</span> Operation <span class="string">"expr $Op"</span></span><br><span class="line">    <span class="keyword">set</span> results [<span class="keyword">eval</span> $Operation]</span><br><span class="line">    <span class="keyword">puts</span> stdout <span class="string">"$Op = $Results\n"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>动态构造Tcl命令，然后解析并执行。</p><h2 id="error和catch命令"><a href="#error和catch命令" class="headerlink" title="error和catch命令"></a>error和catch命令</h2><p>相当于throw expection.<br><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">proc</span><span class="title"> div</span> &#123;a b&#125;&#123;</span><br><span class="line">    <span class="keyword">if</span>&#123;$b==<span class="number">0</span>&#125;&#123;</span><br><span class="line">        <span class="keyword">error</span> <span class="string">"divided by zero"</span></span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">expr</span> $a/$b]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">div <span class="number">1</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></p><h2 id="upvar和uplevel命令"><a href="#upvar和uplevel命令" class="headerlink" title="upvar和uplevel命令"></a>upvar和uplevel命令</h2><ul><li><p>upvar可以使用户在过程中对全局变量或者其他过程中的局部变量进行访问</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">proc</span><span class="title"> decer</span> &#123;n m&#125;&#123;</span><br><span class="line">  <span class="keyword">upvar</span> $n upa</span><br><span class="line">  <span class="keyword">set</span> upa [<span class="keyword">expr</span> $upa-$m]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">set</span> nb <span class="number">12</span></span><br><span class="line">decer nb <span class="number">3</span></span><br><span class="line"><span class="keyword">puts</span> $nb</span><br></pre></td></tr></table></figure></li><li><p>uplevel可以改变上一级栈中的变量值</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">proc</span><span class="title"> ff</span> &#123;&#125;&#123;</span><br><span class="line">    <span class="keyword">set</span> a ff #设置了局部的a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">set</span> a <span class="keyword">global</span></span><br><span class="line">ff</span><br><span class="line"><span class="keyword">puts</span> $a</span><br><span class="line">输出结果： <span class="keyword">global</span></span><br><span class="line">对比：</span><br><span class="line"><span class="keyword">proc</span><span class="title"> ff</span>&#123;&#125;&#123;</span><br><span class="line">    <span class="keyword">uplevel</span> <span class="keyword">set</span> a ff # 改变了上一级栈中的a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">set</span> a <span class="keyword">global</span></span><br><span class="line">ff</span><br><span class="line"><span class="keyword">puts</span> $a</span><br><span class="line">输出:ff</span><br></pre></td></tr></table></figure></li></ul><h1 id="OTcl简介"><a href="#OTcl简介" class="headerlink" title="OTcl简介"></a>OTcl简介</h1><h2 id="OTcl和C-的区别"><a href="#OTcl和C-的区别" class="headerlink" title="OTcl和C++的区别"></a>OTcl和C++的区别</h2><ul><li>C++在一对{}中完成对一个类的定义，而OTcl则是写成多个分开的部分，每一个方法给类增加一个成员函数，OTcl中成员变量是在成员函数中定义。</li><li>C++中的构造函数和析构函数对应OTcl语言中的init函数和destroy函数。OTcl中必须用next显式地调用父类的构造函数。</li><li>OTcl函数必须通过对象来调用。变量$self和C++中的this相似，表示对象自身。OTcl函数都是虚函数。</li><li>OTcl同样可以继承，，使用next关键字调用父类函数<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2>使用<code>instproc</code>定义类的方法，使用<code>proc</code>定义对象的方法，<code>proc</code>定义的方法只能用于该对象<h3 id="类的定义和生成"><a href="#类的定义和生成" class="headerlink" title="类的定义和生成"></a>类的定义和生成</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">% Class Box //使用关键字Class定义一个类Box</span><br><span class="line">% Box box1  //产生类的对象</span><br><span class="line">% box1 info Class   //使用info命令查看类和对象的关系</span><br><span class="line">% Box info instances</span><br></pre></td></tr></table></figure></li></ul><p>产生对象之后对，对对象进行变量定义，也可通过info命令来查看对象的变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">% box1 set length 10</span><br><span class="line">% box1 info vars</span><br><span class="line">length</span><br></pre></td></tr></table></figure></p><h3 id="init函数和destroy函数"><a href="#init函数和destroy函数" class="headerlink" title="init函数和destroy函数"></a>init函数和destroy函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">% Box instproc init &#123;args&#125;&#123;</span><br><span class="line">    $self set length 10</span><br><span class="line">    eval $self next $args</span><br><span class="line">&#125;</span><br><span class="line">% Box instproc destroy &#123;args&#125;&#123;</span><br><span class="line">    puts &quot;The instance is destroyed!&quot;</span><br><span class="line">    $self next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>OTcl支持类的多继承，唯一的要求是继承关系满足有向无环图。superclass用于声明继承。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Class Box</span><br><span class="line">Box instproc init&#123;&#125;&#123;    #定义类的初始函数</span><br><span class="line">    $self <span class="built_in">set</span> count0</span><br><span class="line">    $self next</span><br><span class="line">&#125;</span><br><span class="line">Box instproc Count&#123;&#125;&#123;   #定义类的成员函数Count</span><br><span class="line">    $self instvar count #重新声明变量count</span><br><span class="line">    incr count</span><br><span class="line">    $self next</span><br><span class="line">&#125;</span><br><span class="line">Safety instproc Count&#123;&#125;&#123;</span><br><span class="line">    $self instvar count</span><br><span class="line">    <span class="keyword">if</span>&#123;$count == <span class="number">0</span>&#125;&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;zero&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123; $count &#125;</span><br><span class="line">    $self next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class redBox -superclass Box    #redBox继承于类Box</span><br><span class="line">redBox redBox1</span><br><span class="line"></span><br><span class="line">redBox instproc init &#123;args&#125;&#123;</span><br><span class="line">    $self <span class="built_in">set</span> toppings&#123;&#125;</span><br><span class="line">    eval $self next $args       #调用父类Box的初始化函数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">% redBox1 <span class="built_in">set</span> count</span><br><span class="line"><span class="number">0</span></span><br><span class="line">% redBox1 Count                 #调用父类Count函数</span><br><span class="line">% redBox1 <span class="built_in">set</span> count</span><br><span class="line"><span class="number">1</span></span><br><span class="line">% redBox1 get</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TCL简介&quot;&gt;&lt;a href=&quot;#TCL简介&quot; class=&quot;headerlink&quot; title=&quot;TCL简介&quot;&gt;&lt;/a&gt;TCL简介&lt;/h1&gt;&lt;h2 id=&quot;变量和变量赋值&quot;&gt;&lt;a href=&quot;#变量和变量赋值&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>机器学习从零开始</title>
    <link href="http://yoursite.com/2019/05/28/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B/"/>
    <id>http://yoursite.com/2019/05/28/机器学习从零开始/</id>
    <published>2019-05-28T08:12:20.000Z</published>
    <updated>2019-05-28T08:12:22.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>PIAS与原生ns2中tcp.cc文件之比对</title>
    <link href="http://yoursite.com/2019/05/27/PIAS%E4%B8%8E%E5%8E%9F%E7%94%9Fns2%E4%B8%ADtcp-cc%E6%96%87%E4%BB%B6%E4%B9%8B%E6%AF%94%E5%AF%B9/"/>
    <id>http://yoursite.com/2019/05/27/PIAS与原生ns2中tcp-cc文件之比对/</id>
    <published>2019-05-27T07:19:47.000Z</published>
    <updated>2019-05-27T14:05:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TcpAgent-TcpAgent-Agent-PT-TCP-类"><a href="#TcpAgent-TcpAgent-Agent-PT-TCP-类" class="headerlink" title="TcpAgent::TcpAgent():Agent(PT_TCP)类"></a>TcpAgent::TcpAgent():Agent(PT_TCP)类</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TcpAgent-TcpAgent-Agent-PT-TCP-类&quot;&gt;&lt;a href=&quot;#TcpAgent-TcpAgent-Agent-PT-TCP-类&quot; class=&quot;headerlink&quot; title=&quot;TcpAgent::TcpAgent():Agent(P
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python启动</title>
    <link href="http://yoursite.com/2019/05/25/Python%E5%90%AF%E5%8A%A8/"/>
    <id>http://yoursite.com/2019/05/25/Python启动/</id>
    <published>2019-05-25T06:21:22.000Z</published>
    <updated>2019-05-26T06:55:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>#列表<br>在python中使用方括号来表示列表。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">'treck'</span>,<span class="string">'cabbondale'</span>]</span><br><span class="line">print(bicycles[<span class="number">0</span>])</span><br></pre></td></tr></table></figure></p><p>使用[-1]可以访问列表最后一个元素<code>print(bicycles[-1])</code></p><p>##列表的修改<br><code>bicycles[0] = &#39;giant&#39;</code></p><p>##添加元素<br>append()方法添加元素至列表末尾；<br>insert()方法添加元素至指定位置。<br><code>bicycles.insert(1,bike)</code></p><p>##删除元素<br>del()方法删除元素；<br><code>del bicycles[0]</code><br>pop()方法删除元素并返回元素值；<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">last_ownd=bicycles.pop() //默认删除列表末尾的元素</span><br><span class="line">bicycles.pop(<span class="number">0</span>)          //删除指定位置的元素</span><br></pre></td></tr></table></figure></p><p>remove()根据元素值删除元素(仅删除第一个匹配的元素)；<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bicycles.remove(<span class="string">'treck'</span>)</span><br></pre></td></tr></table></figure></p><p>##组织列表<br>sort() 排序；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bicycles.sort()             //升序</span><br><span class="line">bicycles.sort(reverse=true) //降序</span><br></pre></td></tr></table></figure></p><p>reverse()反转列表元素排列<br>len()返回列表长度</p><p>##for循环遍历列表<br>使用for循环。python根据缩进来判断代码行与前一个代码行的关系。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> bicycle <span class="keyword">in</span> bicycles:</span><br><span class="line">    print(bicycle)</span><br></pre></td></tr></table></figure></p><p>##使用range()创建数字列表<br>range(A,B)方法生成从A到B-1的值<br>函数list()将range()的结果直接转化为列表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numbers = list(range(<span class="number">1</span>,<span class="number">6</span>))  //numbers为数字<span class="number">1</span><span class="number">-5</span>的列表</span><br></pre></td></tr></table></figure></p><p>range()方法还能够指定步长如下，步长为2<br><code>range(1,10,2)</code><br>创建列表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">squares = []</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)</span><br><span class="line">    square = value**<span class="number">2</span></span><br><span class="line">    squares.append(square)</span><br></pre></td></tr></table></figure></p><p>##列表解析<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">squares = [value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)]</span><br></pre></td></tr></table></figure></p><p>##使用列表的一部分——切片<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">'treck'</span>,<span class="string">'cabbondale'</span>,<span class="string">'giant'</span>]</span><br><span class="line">print(bicycles[<span class="number">0</span>:<span class="number">1</span>])</span><br><span class="line">print(bicycles[<span class="number">0</span>:])</span><br><span class="line">print(bicycles[:<span class="number">1</span>])</span><br><span class="line">print(bicycles[<span class="number">-3</span>:]) //最后三个</span><br></pre></td></tr></table></figure></p><p>##复制列表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">'treck'</span>,<span class="string">'cabbondale'</span>,<span class="string">'giant'</span>]</span><br><span class="line">my_bikes = bicycles[:]</span><br></pre></td></tr></table></figure></p><p>不可以直接写<code>my_bikes = bicycles</code>这样无法得到两个列表。</p><p>#选择结构<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a == b) <span class="keyword">and</span> (a != <span class="number">0</span>):</span><br><span class="line">    a=<span class="number">0</span></span><br><span class="line"><span class="keyword">elif</span> b!= <span class="number">0</span>:</span><br><span class="line">    b=<span class="number">0</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    a=b</span><br></pre></td></tr></table></figure></p><p>判断特定的值是否包含在列表中可使用关键字in，反之则使用not in。</p><p>#字典<br>一个简单的字典如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>,<span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure></p><p>在Python中，字典是一系列的键值对，键值对之间用逗号分隔。<br>添加键-值对可以直接输入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alien_0[<span class="string">'x_position'</span>]=<span class="number">0</span></span><br><span class="line">alien_0[<span class="string">'y_position'</span>]=<span class="number">25</span></span><br></pre></td></tr></table></figure></p><p>删除键值对<br><code>del alien_0[&#39;points&#39;]</code></p><p>##字典的遍历</p><ul><li><p>使用for循环遍历所有键值对,方法items()返回一个键值对列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for key,value in alien_0.items():</span><br><span class="line">  print(&quot;\nKey:&quot;+key)</span><br></pre></td></tr></table></figure></li><li><p>key()方法返回所有键的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> alien_0.keys():</span><br><span class="line">  print(name.title())</span><br></pre></td></tr></table></figure></li><li><p>对遍历的结果进行排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> sorted(alien_0.keys()):</span><br><span class="line">  print(name.title())</span><br></pre></td></tr></table></figure></li></ul><p>##字典嵌套<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aliens=[alien_0,alien_1,alien_2]</span><br></pre></td></tr></table></figure></p><p>#用户输入和while循环</p><p>##用户输入</p><ul><li>input()进行用户输入,该方法会将用户的输入解读为字符串<br><code>message=input(&quot;请输入文本&quot;)</code></li><li>使用int()方法可以获取数值输入<br>##while循环<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> message != <span class="string">'quit'</span>:</span><br><span class="line">    message = input()</span><br><span class="line">    print(message)</span><br></pre></td></tr></table></figure></li></ul><p>break,continue的用法与c类似</p><p>#函数</p><p>##函数定义<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">abc</span><span class="params">(a)</span></span></span><br><span class="line"><span class="function">    <span class="title">print</span><span class="params">(<span class="string">"hello ,world"</span>+str<span class="params">(a)</span>)</span></span></span><br><span class="line"><span class="function">    <span class="title">return</span> <span class="title">a</span>+1</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#列表&lt;br&gt;在python中使用方括号来表示列表。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>20190513个人工作</title>
    <link href="http://yoursite.com/2019/05/14/20190514%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/05/14/20190514学习笔记/</id>
    <published>2019-05-14T01:30:48.000Z</published>
    <updated>2019-05-14T08:23:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>翻看何江师兄发的文档</p><h1 id="基于时延的拥塞控制"><a href="#基于时延的拥塞控制" class="headerlink" title="基于时延的拥塞控制"></a>基于时延的拥塞控制</h1><p>将时延的增加视为出现拥塞，时延增加时减小拥塞窗口，延时降低时增加拥塞窗口</p><h2 id="Vegas"><a href="#Vegas" class="headerlink" title="Vegas"></a>Vegas</h2><p>通过比较实际吞吐量和期望吞吐量来调节拥塞窗口的大小。<br>期望吞吐量：Expected=cwnd/BaseRTT<br>实际吞吐量：Actual=cwnd/RTT<br><strong>diff</strong>=(Expected-Actual)*BaseRTT<br><strong>BaseRTT</strong>是所有观测来回响应时间的最小值。</p><ul><li>当a ≤ diff ≤ b 时，拥塞窗口不变</li><li>当diff &lt; a 时，拥塞窗口增加</li><li>当diff &gt; b 时，拥塞窗口减小  </li></ul><p>当网络中Vegase算法与基于丢包的拥塞控制算法共存的情况下，后者会去尝试填满网络中的缓冲区，导致Vegas计算的RTT增大，进而使得传输速度越来越慢。</p><p>##基于链路容量的拥塞控制<br>实时测量网络带宽和时延，认为网络上报文总量大于带宽和时延的乘积时出现了拥塞。</p><h2 id="BBR"><a href="#BBR" class="headerlink" title="BBR"></a>BBR</h2><p>周期性探测网络的容量，交替测量一段时间内的带宽极大值和时延极小值，将其乘积作为拥塞窗口大小，保持拥塞窗口的值始终和网络的容量保持一致。</p><ul><li><strong>RTprop</strong>：往返时延<br>光信号从A端到B端的最小时延(其实是二倍时延，因为是一个来回)</li><li><strong>BtlBW(bottleneck bandwidth)</strong>：瓶颈带宽<br>A到B的链路中，它的带宽取决于最慢的那段链路的带宽，即为瓶颈带宽</li><li><strong>inflight data</strong>：干扰数据<br>A已经发出但未收到B返回的ACK数据</li><li><strong>BDP(bandwidth-delay product)</strong>：时延带宽积<br>BDP=BtlBW*RTprop</li><li><strong>pacing_gain</strong>：控制发送速度的增益系数</li><li><strong>cwnd_gain</strong>：窗口增益系数<br>与BDP相乘，控制inflight数量</li><li><strong>min_rtt</strong>：windows_min(rtt,10 seconds)</li><li><strong>pacing_rate</strong>：pacing_gain * bw</li><li><strong>cwnd</strong>：max(cwnd_gain <em> bw </em> min_rtt)</li><li><strong>FQ(Fair queue)</strong>：公平队列<br>根据bbr设置的pacing rate将一个cwnd内的数据的发送从“突发到网络”这种行为变换到“平缓发送到网络”的行为。<h4 id="1-测量瓶颈带宽和往返时延"><a href="#1-测量瓶颈带宽和往返时延" class="headerlink" title="1.测量瓶颈带宽和往返时延"></a>1.测量瓶颈带宽和往返时延</h4>BBR解决带宽和延迟无法同时测准的方法是：交替测量带宽和延迟；用一段时间内的带宽极大值和延迟极小值作为估计值。<br>最大带宽的值可以用win_minmax计算。保存一个时间窗口内的“最有意义的最大值或者最小值”，在时间流逝的过程中，时间窗口不断向后华东，在需要时间窗口内极值的时候只需取保存的三个值中的第一个值即可。win_minmax算法本身保证了时间窗口随着时间的华东以及窗口内极值的冒泡更新。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;翻看何江师兄发的文档&lt;/p&gt;
&lt;h1 id=&quot;基于时延的拥塞控制&quot;&gt;&lt;a href=&quot;#基于时延的拥塞控制&quot; class=&quot;headerlink&quot; title=&quot;基于时延的拥塞控制&quot;&gt;&lt;/a&gt;基于时延的拥塞控制&lt;/h1&gt;&lt;p&gt;将时延的增加视为出现拥塞，时延增加时减小拥塞窗口
      
    
    </summary>
    
    
    
      <category term="拥塞控制" scheme="http://yoursite.com/tags/%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>spring笔记day02-spring整合Junit</title>
    <link href="http://yoursite.com/2019/04/26/spring%E7%AC%94%E8%AE%B0day02-spring%E6%95%B4%E5%90%88Junit/"/>
    <id>http://yoursite.com/2019/04/26/spring笔记day02-spring整合Junit/</id>
    <published>2019-04-26T12:03:48.000Z</published>
    <updated>2019-04-27T16:23:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spring笔记day02-spring整合Junit"><a href="#spring笔记day02-spring整合Junit" class="headerlink" title="spring笔记day02-spring整合Junit"></a>spring笔记day02-spring整合Junit</h2><p>应用程序的入口为main()方法。junit单元测试中，没有main()方法也能执行，因为junit集成了一个main()方法。该方法可以判断当前测试类中哪些方法有<code>@Test</code>注解。junit就会让有注解的方法执行。junit并不会馆管我们是否采用spring框架。因此在执行测试方法时，junit不会为我们读取配置文件/配置类创建spring核心容器。所以就算写了<code>@Autowired</code>注解，也不会为我们注入数据。<br>解决思路：使用能加载spring容器的main()方法。<br>解决方法：</p><ul><li>1.导入spring-test的jar包  </li><li>2.使用junit提供的注解把原有的main（）方法替换成spring提供的@Runwith注解  </li><li>3.告知spring的运行器（基于xml还是注解），并说明位置<br>@ContextConfiguration:（当使用spring5.x版本时，要求junit的jar包必须是4.1.2及以上）<br>location:指定xml文件的位置，加上classpath关键字，表示在类路径下<br>classes:指定注解类所在的位置  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(classes = SpringConfiguration.class)</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(locations = <span class="string">"classpath:bean.xml"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line"><span class="comment">//    private ApplicationContext ac;</span></span><br><span class="line">    <span class="keyword">private</span> IAccountService as = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.执行方法</span></span><br><span class="line">        List&lt;Account&gt; accounts = as.findAllAcccount();</span><br><span class="line">        <span class="keyword">for</span>(Account account : accounts)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;spring笔记day02-spring整合Junit&quot;&gt;&lt;a href=&quot;#spring笔记day02-spring整合Junit&quot; class=&quot;headerlink&quot; title=&quot;spring笔记day02-spring整合Junit&quot;&gt;&lt;/a&gt;sprin
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>spring笔记day02(spring的新注解)</title>
    <link href="http://yoursite.com/2019/04/26/spring%E7%AC%94%E8%AE%B0day02-spring%E7%9A%84%E6%96%B0%E6%B3%A8%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/04/26/spring笔记day02-spring的新注解/</id>
    <published>2019-04-26T06:53:29.000Z</published>
    <updated>2019-04-26T12:24:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring笔记day02-spring的新注解"><a href="#spring笔记day02-spring的新注解" class="headerlink" title="spring笔记day02(spring的新注解)"></a>spring笔记day02(spring的新注解)</h1><p>本篇解决无法脱离xml文件的问题</p><h2 id="Configuration和ComponentScan"><a href="#Configuration和ComponentScan" class="headerlink" title="Configuration和ComponentScan"></a>Configuration和ComponentScan</h2><ul><li>Configuration<br>作用：指定当前类是一个配置类</li><li>ComponentScan<br>作用：通过注解指定spring在创建容器时要扫描的包<br>属性：value = backPackages (要扫描的包)<br>使用此注解就相当于使用了xml文件中的<code>&lt;context:component-scan base-package=&quot;com.itheima&quot;&gt;&lt;/context:component-scan&gt;</code></li><li>Bean：把当前方法的返回值作为bean对象存入spring的ioc容器中<br>  属性： name：指定bean的id。默认值为当前方法的名称。</li><li>细节：当我们使用注解配置方法时，如果方法有参数，spring框架会去容器中查找有没有可用的bean对象,查找方式和Autowired注解是一样的。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = <span class="string">"com.itheima"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个queryrunner对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"runner"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">createQueryRunner</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建数据源对象</span></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ComboPooledDataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">            ds.setDriverClass(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            ds.setJdbcUrl(<span class="string">"jdbc:mysql://localhost:3306/eesy"</span>);</span><br><span class="line">            ds.setUser(<span class="string">"root"</span>);</span><br><span class="line">            ds.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">            <span class="keyword">return</span> ds;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在测试类中使用<code>AnnotationConfigApplicationContext(SpringConfiguration.class)</code>方法获取容器。这样我们就可以删掉bean.xml文件了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.获取容器</span></span><br><span class="line">        <span class="comment">//ApplicationContext ac = new ClassPathXmlApplicationContext("bean.xml");</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfiguration.class);</span><br><span class="line">        <span class="comment">//2.得到业务层对象</span></span><br><span class="line">        IAccountService as = ac.getBean(<span class="string">"accountService"</span>,IAccountService.class);</span><br><span class="line">        <span class="comment">//3.执行方法</span></span><br><span class="line">        List&lt;Account&gt; accounts = as.findAllAcccount();</span><br></pre></td></tr></table></figure></p><p>注意，此时的runner已经是单例的，而我们之前使用的是多例对象，这样会造成如果有多个用户同时使用接口时会产生线程冲突。因此我们需要加上<code>@Scope</code>注解。</p><h3 id="一些-Configuration注解的细节"><a href="#一些-Configuration注解的细节" class="headerlink" title="一些@Configuration注解的细节"></a>一些@Configuration注解的细节</h3><p>我们会发现，在去掉@Configuration之后程序依然能够运行。仿佛没有任何存在的意义。当配置类作为AnnotationConfig。。。对象创建的参数时，该注解可以不写。如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfiguration.class, JdbcConfig.class);</span><br></pre></td></tr></table></figure></p><p>如果没有在这个参数表中的话就要加上Configuration注解并配置扫描的包。这个问题可以使用下面的Import注解解决。</p><h2 id="Import"><a href="#Import" class="headerlink" title="Import"></a>Import</h2><p>作用：用于导入其他的配置类<br>属性：value：用于指定其他配置类的字节码。当使用Import注解后，有import注解的类就是主（父）配置类，导入的都是子配置类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import</span>(JdbcConfig.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>到了这一步，我们发现数据源的配置还是写死的状态。接下来我们将使用另一个注解解决这个问题。</p><h2 id="PropertySource"><a href="#PropertySource" class="headerlink" title="PropertySource"></a>PropertySource</h2><ul><li>作用：用于指定properties文件的位置</li><li>属性：<br>value：文件名称和路径<br>关键字：classpath表示类路径下<br>我们首先新建一个.properites文件。在里面配置数据源。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/eesy</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123456</span><br></pre></td></tr></table></figure></li></ul><p>随后在我们的代码中加入注解。再将数据源中的字符串更换成我们所书写的变量。通过变量存储.properties文件中的各个值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.driver&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"runner"</span>)</span><br><span class="line">    <span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">createQueryRunner</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建数据源对象</span></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ComboPooledDataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">            ds.setDriverClass(driver);</span><br><span class="line">            ds.setJdbcUrl(url);</span><br><span class="line">            ds.setUser(username);</span><br><span class="line">            ds.setPassword(password);</span><br><span class="line">            <span class="keyword">return</span> ds;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:jdbcConfig.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>这样我们就完全摆脱了.xml文件。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们使用了纯xml文件的方式和纯注解的方式以及xml和注解混用的方式来进行对象的创建和容器的注入。那么具体使用哪种方法呢。<br>在我们有权利选择的情况下。最好使用两种方法混用的方式。如果该类是别人写好的封装成jar包的类，我们最好使用xml的方式来进行。如果是我们自己写的，使用注解更方便。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;spring笔记day02-spring的新注解&quot;&gt;&lt;a href=&quot;#spring笔记day02-spring的新注解&quot; class=&quot;headerlink&quot; title=&quot;spring笔记day02(spring的新注解)&quot;&gt;&lt;/a&gt;spring笔记day02
      
    
    </summary>
    
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring笔记day02(IOC案例实现)</title>
    <link href="http://yoursite.com/2019/04/25/spring%E7%AC%94%E8%AE%B0day02-IOC%E6%A1%88%E4%BE%8B%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/04/25/spring笔记day02-IOC案例实现/</id>
    <published>2019-04-25T12:14:31.000Z</published>
    <updated>2019-04-26T12:25:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring笔记day02-IOC案例实现"><a href="#spring笔记day02-IOC案例实现" class="headerlink" title="spring笔记day02(IOC案例实现)"></a>spring笔记day02(IOC案例实现)</h1><p>本篇将实现一个连接mysql数据库的一个账号管理的实例。<br>首先导入依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="编写业务层、持久层"><a href="#编写业务层、持久层" class="headerlink" title="编写业务层、持久层"></a>编写业务层、持久层</h2><p>接下来依次编写业务层、持久层的接口和实现类。在这之前，我们已经在本地mysql数据库中新建了一个account的表结构。首先实现账户的实体类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*账户的实体类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Float money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Account&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", money="</span> + money +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后是业务层的接口类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有account</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAllAcccount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询一个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">findAccountByid</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>持久层的接口类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户持久层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有account</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAllAcccount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询一个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">findAccountByid</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>业务层接口的实现类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(IAccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllAcccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAllAcccount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountByid</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAccountByid(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.saveAccount(account);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.updateAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        accountDao.deleteAccount(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>持久层接口的实现类。这其中的QueryRunner对象我们也使用spring进行注入。<br>使用query方法是要注意，必须增加抛出异常的方法，否则会报错。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> QueryRunner runner;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRunner</span><span class="params">(QueryRunner runner)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.runner = runner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllAcccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> runner.query(<span class="string">"select * from account"</span>,<span class="keyword">new</span> BeanListHandler&lt;Account&gt;(Account.class));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountByid</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> runner.query(<span class="string">"select * from account where id = ? "</span>,<span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account.class),id);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            runner.update(<span class="string">"insert into account(name,money)values(?,?)"</span>,account.getName(),account.getMoney());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            runner.update(<span class="string">"updae account set name = ?,money = ? where id = ?"</span>,account.getName(),account.getMoney(),account.getId());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            runner.update(<span class="string">"delete account where id = ?"</span>,id);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="搭建spring开发环境"><a href="#搭建spring开发环境" class="headerlink" title="搭建spring开发环境"></a>搭建spring开发环境</h2><p>/resource目录下新建bean.xml并配置对象。若配置正确，idea会提示进行下一个对象的配置。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置service对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"accoutService"</span> <span class="attr">class</span> = <span class="string">"com.itheima.service.impl.AccountServiceImpl"</span> &gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入Dao对象(set方法)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span> = <span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置dao--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"accountDao"</span> <span class="attr">class</span> = <span class="string">"com.itheima.dao.impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入QueryRunner对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"runner"</span> <span class="attr">ref</span> = <span class="string">"runner"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"runner"</span> <span class="attr">class</span> = <span class="string">"org.apache.commons.dbutils.QueryRunner"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入数据源(使用构造函数)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span> = <span class="string">"ds"</span> <span class="attr">ref</span> = <span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"dataSource"</span> <span class="attr">class</span> = <span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入连接数据库的必备信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span> = <span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span> = <span class="string">"jdbc:mysql://localhost:3306/eesy"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span> = <span class="string">"123456"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="测试对数据库的增删改查"><a href="#测试对数据库的增删改查" class="headerlink" title="测试对数据库的增删改查"></a>测试对数据库的增删改查</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.得到业务层对象</span></span><br><span class="line">        IAccountService as = ac.getBean(<span class="string">"accountService"</span>,IAccountService.class);</span><br><span class="line">        <span class="comment">//3.执行方法</span></span><br><span class="line">        List&lt;Account&gt; accounts = as.findAllAcccount();</span><br><span class="line">        <span class="keyword">for</span>(Account account : accounts)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.得到业务层对象</span></span><br><span class="line">        IAccountService as = ac.getBean(<span class="string">"accountService"</span>,IAccountService.class);</span><br><span class="line">        <span class="comment">//3.执行方法</span></span><br><span class="line">        Account account = as.findAccountByid(<span class="number">1</span>);</span><br><span class="line">            System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.得到业务层对象</span></span><br><span class="line">        IAccountService as = ac.getBean(<span class="string">"accountService"</span>,IAccountService.class);</span><br><span class="line"></span><br><span class="line">        Account account = as.findAccountByid(<span class="number">4</span>);</span><br><span class="line">        account.setMoney(<span class="number">123456f</span>);</span><br><span class="line">        as.updateAccount(account);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(<span class="string">"test"</span>);</span><br><span class="line">        account.setMoney(<span class="number">12345f</span>);</span><br><span class="line"></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.得到业务层对象</span></span><br><span class="line">        IAccountService as = ac.getBean(<span class="string">"accountService"</span>,IAccountService.class);</span><br><span class="line"></span><br><span class="line">        as.saveAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.得到业务层对象</span></span><br><span class="line">        IAccountService as = ac.getBean(<span class="string">"accountService"</span>,IAccountService.class);</span><br><span class="line">        <span class="comment">//3.执行方法</span></span><br><span class="line">        Account account = as.findAccountByid(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于注解的IOC改造案例"><a href="#基于注解的IOC改造案例" class="headerlink" title="基于注解的IOC改造案例"></a>基于注解的IOC改造案例</h2><p>重新配置bean.xml。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--告知spring在创建容器时要扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.itheima"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置QueryRunner--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"runner"</span> <span class="attr">class</span> = <span class="string">"org.apache.commons.dbutils.QueryRunner"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入数据源(使用构造函数)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span> = <span class="string">"ds"</span> <span class="attr">ref</span> = <span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"dataSource"</span> <span class="attr">class</span> = <span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入连接数据库的必备信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span> = <span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span> = <span class="string">"jdbc:mysql://localhost:3306/eesy"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span> = <span class="string">"123456"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>改造配置代码成为纯注解。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner runner;</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上即为spring的ioc案例实现。尽管我们将对象的创建和数据的注入都交给了spring，但依然存在几个问题：<br>1.test类中代码冗余<br>2.无法脱离xml文件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;spring笔记day02-IOC案例实现&quot;&gt;&lt;a href=&quot;#spring笔记day02-IOC案例实现&quot; class=&quot;headerlink&quot; title=&quot;spring笔记day02(IOC案例实现)&quot;&gt;&lt;/a&gt;spring笔记day02(IOC案例实现)
      
    
    </summary>
    
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>sping学习笔记day2(上)</title>
    <link href="http://yoursite.com/2019/04/21/spring%E7%AC%94%E8%AE%B0day02/"/>
    <id>http://yoursite.com/2019/04/21/spring笔记day02/</id>
    <published>2019-04-21T10:33:26.000Z</published>
    <updated>2019-04-22T09:34:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sping学习笔记day2-上"><a href="#sping学习笔记day2-上" class="headerlink" title="sping学习笔记day2(上)"></a>sping学习笔记day2(上)</h1><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul><li>spring基于注解的IOC以及IOC的案例</li><li>spring中IOC的常用注解</li><li>案例使用xml方式和注解方式时间单表的CRUD操作<br>持久层技术选择：dbutils</li><li>改造基于注解的IOC案例，使用纯注解的方式实现<br>spring的一些新注解使用</li><li>spring和Junit整合<h2 id="1-基于注解的IOC配置"><a href="#1-基于注解的IOC配置" class="headerlink" title="1 基于注解的IOC配置"></a>1 基于注解的IOC配置</h2>注解和xml对应分为四类</li><li>1.用于创建对象的注解。相当于在xml文件中编写的 &#60;bean&#62;标签。</li><li>2.用于注入数据的注解。相当于在xml文件中的&#60;bean&#62;标签中写一个&#60;property&#62;标签。</li><li>3.用于改变作用范围的注解。相当于在xml文件中的&#60;bean&#62;标签中使用scope属性。</li><li>4.和生命周期相关。相当于在&#60;bean&#62;标签中使用init-method和destroy-method。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--告知spring在创建容器时要扫描的包，配置所需要的标签不是在beans的约束中，而是一个名称为context名称空间和约束中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.itheima"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="1-1-用于创建对象的注解"><a href="#1-1-用于创建对象的注解" class="headerlink" title="1.1 用于创建对象的注解"></a>1.1 用于创建对象的注解</h3><table><thead><tr><th>注解名</th><th>作用</th><th>属性</th><th>作用</th></tr></thead><tbody><tr><td><em>@Component</em></td><td>把当前类对象存入spring容器中</td><td><em>value</em></td><td>用于指定bean的id。默认值是当前类名且首字母小写</td></tr><tr><td><em>@Controller</em></td><td>用于表现层</td><td>同上</td><td>同上</td></tr><tr><td><em>@Service</em></td><td>用于业务层</td><td>同上</td><td>同上</td></tr><tr><td><em>@Repository</em></td><td>用于持久层</td><td>同上</td><td>同上</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(value=<span class="string">"accountservice"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(value=<span class="string">"accountservice"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取核心容器对象</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">       <span class="comment">// 2.根据id获取bean对象</span></span><br><span class="line">        IAccountService as =(IAccountService)ac.getBean(<span class="string">"accountservice"</span>);</span><br><span class="line">        IAccountDao adao =ac.getBean(<span class="string">"accountDao"</span>,IAccountDao.class);</span><br><span class="line">        System.out.println(as);</span><br><span class="line">        System.out.println(adao);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-用于注入数据的注解"><a href="#1-2-用于注入数据的注解" class="headerlink" title="1.2 用于注入数据的注解"></a>1.2 用于注入数据的注解</h3><ul><li><p>Autowired<br>作用：自动按照<strong>类型</strong>注入，只要容器中有唯一的一个bean对象类型和要注入的变量类型匹配，就可以注入成功。<br>若IOC容器中没有任何bean类型和注入的变量类型匹配则报错。<br>若有多个匹配时,首先按照类型圈定匹配的对象，接下来使用变量名称作为bean的id继续查找，若都不一样即报错。<br>出现位置：可以是变量上，也可以是方法上。<br>细节：使用注解注入时，set方法就不是必须的了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(value=<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao ;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        accountDao.saveAccount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Qualifier<br>作用：在按照类型注入的基础上再按照名称注入，它给类成员注入时不能单独使用，但给方法参数注入时可以。<br>属性：value：用于指定注入bean的id。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"accountDao1"</span>)</span><br></pre></td></tr></table></figure></li><li><p>Resource:<br>作用：直接按照bean的id注入。可以直接使用。<br>属性：name：用于指定bean的id<br>以上三个注解都只能注入其他bean类型的数据，基本类型和string类型无法使用上述注解实现。另外，集合类型的注入只能通过xml来实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span>(name=<span class="string">"accountDao1"</span>)</span><br><span class="line"><span class="keyword">private</span> IAccountDao accountDao = <span class="keyword">null</span> ;</span><br></pre></td></tr></table></figure></li><li><p>Value：<br>作用：用于注入基本类型和String类型的数据。<br>属性：Value：用于指定数据的值。它可以使用Spring中的SpEL（spring的el表达式）SpEL的写法：${表达式}。</p><h3 id="1-3-用于改变作用范围的注解"><a href="#1-3-用于改变作用范围的注解" class="headerlink" title="1.3 用于改变作用范围的注解"></a>1.3 用于改变作用范围的注解</h3><p>scope作用：用于指定bean的作用范围<br>属性：value：指定范围的取值。常用取值：singleton prototype。若不写scope，默认取值是singleton。</p><h3 id="1-4和生命周期相关-了解"><a href="#1-4和生命周期相关-了解" class="headerlink" title="1.4和生命周期相关(了解)"></a>1.4和生命周期相关(了解)</h3><p>和bean标签中使用init/destroy-method是一样的  </p></li><li>Predestroy：指定销毁方法</li><li>Postconstruct：指定初始化方法</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sping学习笔记day2-上&quot;&gt;&lt;a href=&quot;#sping学习笔记day2-上&quot; class=&quot;headerlink&quot; title=&quot;sping学习笔记day2(上)&quot;&gt;&lt;/a&gt;sping学习笔记day2(上)&lt;/h1&gt;&lt;h2 id=&quot;主要内容&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring笔记01</title>
    <link href="http://yoursite.com/2019/04/19/springnote1/"/>
    <id>http://yoursite.com/2019/04/19/springnote1/</id>
    <published>2019-04-19T13:07:05.000Z</published>
    <updated>2019-04-23T02:21:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring笔记（一）——程序的耦合和解耦"><a href="#spring笔记（一）——程序的耦合和解耦" class="headerlink" title="spring笔记（一）——程序的耦合和解耦"></a><strong>spring笔记（一）——程序的耦合和解耦</strong></h1><p>耦合：程序之间的依赖关系<br>第一步：通过反射来创建对象，而避免使用new关键字<br>第二部：通过读取配置文件来获取要创建的对象全限定类名  </p><h2 id="工厂模式解耦"><a href="#工厂模式解耦" class="headerlink" title="工厂模式解耦"></a>工厂模式解耦</h2><p>一个创建Bean对象的工厂<br>Bean：可重用组件<br>JavaBean！=实体类：实体类是Bean的一部分。JavaBean是使用java语言编写的可重用组件。<br>工厂就是创建serveice和dao对象的<br>第一：需要一个配置文件来配置service和dao。<br>　　　　配置的内容：全限定类名=唯一标识。（key=value）<br>第二：通过读取配置文件中配置的内容，反射创建对象。<br>配置文件可以是xml和properties<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//实例化对象</span></span><br><span class="line">            props = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//获取properties文件的流对象</span></span><br><span class="line">            InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream(<span class="string">"bean.properties"</span>);</span><br><span class="line">            props.load(in);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">"初始化properties失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据bean的名称获取bean对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span></span>&#123;<span class="comment">//此处使用静态方法。因为无法在静态类中引用非静态对象</span></span><br><span class="line">        Object bean = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            String beanPath = props.getProperty(beanName);</span><br><span class="line">            bean = Class.forName(beanPath).newInstance();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><p>控制反转（IOC）<br>降低程序间的依赖<br>spring中的IOC容器是是Map结构</p><h3 id="使用spring中的IOC解决程序耦合"><a href="#使用spring中的IOC解决程序耦合" class="headerlink" title="使用spring中的IOC解决程序耦合"></a>使用spring中的IOC解决程序耦合</h3><p>　　导入beanfactory的工程，delete掉factory。在resources下新建xml文件，该文件可自由命名。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--吧对象的创建交给spring管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.itheima.service.impl.AccountServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"accountDao"</span> <span class="attr">class</span> = <span class="string">"com.itheima.dao.impl.AccountDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>获取spring的IOC核心容器，并根据id获取对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取spring的IOC核心容器，并根据id获取对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//IAccountService as =new AccountServiceImpl();</span></span><br><span class="line">        <span class="comment">//1.获取核心容器对象</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">            applicationcontext三个常用实现类</span></span><br><span class="line"><span class="comment">     *      CkassPathXmlApplicationContext:加载类路径下的配置文件，要求配置文件必须在类路径下</span></span><br><span class="line"><span class="comment">     *      FileSystemXml：加载磁盘任一路经下的配置文件</span></span><br><span class="line"><span class="comment">     *      AnnotationConfig：读取注解创建容器</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//2.根据id获取bean对象</span></span><br><span class="line">        IAccountService as =(IAccountService)ac.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">        IAccountDao adao =ac.getBean(<span class="string">"accountDao"</span>,IAccountDao.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(as);</span><br><span class="line">        System.out.println(adao);</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        as.saveAccount();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>核心容器的两个接口引发出的问题</p><ul><li>ApplicationContext：  适用场景（单例对象创建）<br>   它在构建核心容器时，创建对象采取的思想是采用立即加载的方式。也就是说，只要一读取完配置文件马上就创建配置文件中配置的对象。</li><li>Beanfactory：    适用场景（多例对象）<br>  创建对象时采取的策略是延迟加载的方式。什么时候根据id获取对象，什么时候才真正地创建对象。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//---------------BeanFactory----------------</span></span><br><span class="line">        Resource resource = <span class="keyword">new</span> ClassPathResource(<span class="string">"bean.xml"</span>);</span><br><span class="line">        BeanFactory factory = <span class="keyword">new</span> XmlBeanFactory(resource);</span><br><span class="line"></span><br><span class="line">        IAccountService as =(IAccountService)factory.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">        System.out.println(as);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>spring框架可以从配置上的不同选择不同的对象创建模式。实例开发中更多的是采用ApplicationContext接口创建对象。</p><h2 id="spring对bean对象的管理细节"><a href="#spring对bean对象的管理细节" class="headerlink" title="spring对bean对象的管理细节"></a>spring对bean对象的管理细节</h2><h3 id="创建bean的三种方式"><a href="#创建bean的三种方式" class="headerlink" title="创建bean的三种方式"></a>创建bean的三种方式</h3><ul><li>使用默认构造函数创建<br>　　在spring配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时。采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建。并在xml文件中就会报错。</li><li><p>使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"instanceFactory"</span> <span class="attr">class</span>=<span class="string">"com.itheima.factory.InstanceFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">factory-bean</span>=<span class="string">"instanceFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getAccountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用工厂的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"instanceFactory"</span> <span class="attr">class</span>=<span class="string">"com.itheima.factory.InstanceFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.itheima.factory.StaticFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getAccountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.factory;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.IAccountService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.impl.AccountServiceImpl;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  IAccountService <span class="title">getAccountService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bean的作用范围"><a href="#bean的作用范围" class="headerlink" title="bean的作用范围"></a>bean的作用范围</h3><p>bean标签的scope属性用于用于指定bean的作用范围，取值：常用单例或者多例 </p><ul><li>singleton：单例（默认值）</li><li>prototype：多例</li><li>request：作用于web应用的请求范围</li><li>session：作用于web应用的会话范围</li><li>global-session：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session</li></ul><h3 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h3><ul><li>单例对象：<pre><code>出生：容器创建时  活着：容器存在  死亡：容器销毁  总结：单例对象的生命周期与容器相同</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.itheima.service.impl.AccountServiceImpl"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">scope</span>=<span class="string">"singleton"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destroy"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟保存账户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountServiceImpl</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对象创建了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"service中的saveAccount方法执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对象初始化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对象销毁"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line"></span><br><span class="line">        IAccountService as =(IAccountService)ac.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">        as.saveAccount();</span><br><span class="line">        ac.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>多例对象：<pre><code>出生：使用对象时spring框架创建  活着：对象在使用过程中  死亡：当对象长时间不用，且没有别的对象引用时，由Java的辣鸡回收器回收</code></pre><h2 id="spring的依赖注入"><a href="#spring的依赖注入" class="headerlink" title="spring的依赖注入"></a>spring的依赖注入</h2>依赖注入：dependency injection。<br>IOC的作用： 降低程序间的耦合。<br>依赖关系的管理：交给spring的维护。<br>在当前类需要用到其他类的对象，有spring为我们提供，我们只需要在配置文件中说明依赖关系的维护：就称之为依赖注入。  </li><li>能够注入的类型：三类<br>　　基本类型和String<br>　　其他bean类型（在配置文件中或者注解配置过的bean）<br>　　复杂类型  </li><li>注入的方式：<br><strong>使用构造函数注入</strong><br>使用的标签：constructor-org<br>标签出现的位置：bean标签的内部<br>标签中的属性:<br>　　type：用于指定注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型<br>　　index:用于指定要注入的数据给构造函数中指定索引位置的参数赋值，索引的位置从0开始<br>　　name：用于指定给构造函数中指定名称的参数赋值（常用）<br>　　value：用于给基本类型和string类型的数据<br>　　ref：引用关联的bean对象，用于指定其他的bean类型数据。（在spring的IOC核心容器中出现过的bean对象）<br>优势：在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功。<br>弊端：改变了bean对象的实例化方式，使我们在创建对象时如果用不到这些数据也必须提供。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟保存账户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//如果是经常变化的数据，并不适用于注入的方式</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountServiceImpl</span><span class="params">(String name,Integer age,Date birthday)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">        <span class="keyword">this</span>.birthday=birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"service中的saveAccount方法执行了"</span>+name+<span class="string">","</span>+age+<span class="string">","</span>+birthday);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.itheima.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">ref</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置一个日期对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"now"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用set方法提供(较上面的方法更加常用)</strong><br>　　涉及的标签；property<br>　　出现的位置：bean标签的内部<br>　　标签的属性：<br>　　　　name:用于指定注入时所调用的set方法名称<br>　　　　value:同上<br>　　　　ref:同上<br>　　优势：创建对象时没有明确的限制，可直接使用默认构造函数<br>　　弊端：若有某个成员必须有值，则获取对象时有可能set方法没有执行  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl2</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟保存账户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果是经常变化的数据，并不适用于注入的方式</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"service中的saveAccount方法执行了"</span>+name+<span class="string">","</span>+age+<span class="string">","</span>+birthday);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService2"</span> <span class="attr">class</span>=<span class="string">"com.itheima.service.impl.AccountServiceImpl2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"21"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">ref</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用注解提供</strong><br>此处不做介绍<br><strong>复杂类型/集合类型的注入</strong><br>于给List结构集合注入的标签：list,array,set<br>用于给map结构集合注入的标签：map，property<br>　　<strong>结构相同，标签可以互换</strong><br>常用set方法进行注入。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl3</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] myStrs;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; myList;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; mySet;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; myMap;</span><br><span class="line">    <span class="keyword">private</span> Properties myPops;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyStrs</span><span class="params">(String[] myStrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myStrs = myStrs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyList</span><span class="params">(List&lt;String&gt; myList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myList = myList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMySet</span><span class="params">(Set&lt;String&gt; mySet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mySet = mySet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyMap</span><span class="params">(Map&lt;String, String&gt; myMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myMap = myMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyPops</span><span class="params">(Properties myPops)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myPops = myPops;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(myStrs));</span><br><span class="line">        System.out.println(myList);</span><br><span class="line">        System.out.println(mySet);</span><br><span class="line">        System.out.println(myMap);</span><br><span class="line">        System.out.println(myPops);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService3"</span> <span class="attr">class</span>=<span class="string">"com.itheima.service.impl.AccountServiceImpl3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myStrs"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myList"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mySet"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myMap"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"testA"</span> <span class="attr">value</span>=<span class="string">"aaa"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"testB"</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                        bbb</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myPops"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"testC"</span> &gt;</span>ccc<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"testD"</span> &gt;</span>ddd<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;spring笔记（一）——程序的耦合和解耦&quot;&gt;&lt;a href=&quot;#spring笔记（一）——程序的耦合和解耦&quot; class=&quot;headerlink&quot; title=&quot;spring笔记（一）——程序的耦合和解耦&quot;&gt;&lt;/a&gt;&lt;strong&gt;spring笔记（一）——程序
      
    
    </summary>
    
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
</feed>
